<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on WinNote</title><link>https://winotmk.github.io/tags/linux/</link><description>Recent content in Linux on WinNote</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>winotmk</copyright><lastBuildDate>Wed, 25 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://winotmk.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>calibre_web的pdf封面提取问题</title><link>https://winotmk.github.io/posts/240925_calibre_web%E7%9A%84pdf%E5%B0%81%E9%9D%A2%E6%8F%90%E5%8F%96%E9%97%AE%E9%A2%98/</link><pubDate>Wed, 25 Sep 2024 00:00:00 +0000</pubDate><guid>https://winotmk.github.io/posts/240925_calibre_web%E7%9A%84pdf%E5%B0%81%E9%9D%A2%E6%8F%90%E5%8F%96%E9%97%AE%E9%A2%98/</guid><description>&lt;p>在用&lt;code>johngong/calibre-web:latest&lt;/code>这个镜像 &lt;a class="link" href="https://hub.docker.com/r/johngong/calibre-web" target="_blank" rel="noopener"
>https://hub.docker.com/r/johngong/calibre-web&lt;/a>
作为自己nas上的图书馆时发现pdf文件无法生成封面，
&lt;img src="https://winotmk.github.io/images/20240925124359.png"
loading="lazy"
>&lt;/p>
&lt;p>断断续续排查了两周，百思不得解，尝试过：&lt;/p>
&lt;ul>
&lt;li>设置imagemagick的&lt;code>policy.xml&lt;/code>文件(&lt;code>/etc/Imagemagick/policy.xml&lt;/code>)&lt;/li>
&lt;li>使用lscr.io/linuxserver/calibre-web:latest的镜像&lt;/li>
&lt;li>自己重新构建镜像&lt;/li>
&lt;li>重新安装calibre-web包和重装imagemagick包
都解决不了，总之是十分折腾，最后认为可能是&lt;code>johngong/calibre-web:latest&lt;/code>可能是里少了一个&lt;code>imagemagick-pdf&lt;/code>包&lt;/li>
&lt;/ul>
&lt;h2 id="最终有效的解决方法的折腾流程">最终有效的解决方法的折腾流程
&lt;/h2>&lt;p>我尝试上传pdf文件，然后打开日志（日志级别设置为DEBUG）
&lt;img src="https://winotmk.github.io/images/20240925123504.png"
loading="lazy"
>
查看文件：/config/calbre-web/calbre-web.log
有这么一行：
&lt;img src="https://winotmk.github.io/images/20240925123738.png"
loading="lazy"
>&lt;/p>
&lt;pre>&lt;code>[2024-09-25 12:10:22,144] WARN {cps.uploader:237} Cannot extract cover image, using default: no decode delegate for this image format `PDF' @ error/constitute.c/ReadImage/746
[2024-09-25 12:10:22,145] WARN {cps.uploader:238} On Windows this error could be caused by missing ghostscript
&lt;/code>&lt;/pre>
&lt;p>PDF转就转不出来
所以找到了：
&lt;img src="https://winotmk.github.io/images/20240925123303.png"
loading="lazy"
>
&lt;a class="link" href="https://github.com/ImageMagick/ImageMagick/issues/6148" target="_blank" rel="noopener"
>https://github.com/ImageMagick/ImageMagick/issues/6148&lt;/a>&lt;/p>
&lt;pre>&lt;code>apk add --no-cache imagemagick imagemagick-pdf
&lt;/code>&lt;/pre>
&lt;p>安装完以后，再次尝试上传pdf格式的书，就看见封面辣！！
&lt;img src="https://winotmk.github.io/images/20240925123414.png"
loading="lazy"
>&lt;/p>
&lt;!-- more -->
&lt;h2 id="johngongcalibre-web的一些设置">johngong/calibre-web的一些设置
&lt;/h2>&lt;p>&lt;a class="link" href="https://github.com/gshang2017/docker/issues/133" target="_blank" rel="noopener"
>https://github.com/gshang2017/docker/issues/133&lt;/a>
如果一编辑图书的元数据就卡死，可用尝试：
&lt;img src="https://winotmk.github.io/images/20240925134344.png"
loading="lazy"
>
这两条设置为true,则
&lt;img src="https://winotmk.github.io/images/20240925134613.png"
loading="lazy"
>
这里不会出现google等选项，家里的nas没有梯子环境，反而会导致卡死，所以禁用google吧。。也没啥用&lt;/p>
&lt;h2 id="弯路">弯路
&lt;/h2>&lt;p>这里想记一下这个弯路，在calibre-web的FAQ里赫然记着有关pdf文件转不出封面的解决办法，说要改
&lt;img src="https://winotmk.github.io/images/20240925140205.png"
loading="lazy"
>
&lt;a class="link" href="https://github.com/janeczku/calibre-web/wiki/FAQ#what-to-do-if-cover-pictures-are-not-extracted-from-pdf-files" target="_blank" rel="noopener"
>https://github.com/janeczku/calibre-web/wiki/FAQ#what-to-do-if-cover-pictures-are-not-extracted-from-pdf-files&lt;/a>
所以可以有&lt;code>/etc/Imagemagick/policy.xml&lt;/code>:&lt;/p>
&lt;pre>&lt;code>&amp;lt;policymap&amp;gt;
&amp;lt;policy domain=&amp;quot;coder&amp;quot; rights=&amp;quot;read | write&amp;quot; pattern=&amp;quot;{MSVG,MVG,PS,PDF,RSVG,SVG,XPS}&amp;quot; /&amp;gt;
&amp;lt;/policymap&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>这是最容易找到的一种解法，但我自己试了无用，没有上面的装&lt;code>apk add imagemagick-pdf&lt;/code>好使&lt;/p>
&lt;h2 id="尝试出来的另一种pdf封面提取可行方法">尝试出来的另一种PDF封面提取可行方法
&lt;/h2>&lt;p>这样做出来的calibre-web镜像可以实现PDF转换，但是没有电子书格式转换，没有禁用google元数据搜索，没有中文环境，懒得自己做了，还是修修用&lt;code>johngong/calibre-web&lt;/code>包吧
为了试验，我用&lt;code>FROM ubuntu:latest&lt;/code>作为镜像基底，然后：&lt;/p>
&lt;h3 id="装calibre-web">装calibre-web
&lt;/h3>&lt;p>安装calibre-web：
&lt;img src="https://winotmk.github.io/images/20240925132535.png"
loading="lazy"
>
&lt;a class="link" href="https://github.com/janeczku/calibre-web?tab=readme-ov-file#installation" target="_blank" rel="noopener"
>https://github.com/janeczku/calibre-web?tab=readme-ov-file#installation&lt;/a>
&lt;a class="link" href="https://github.com/janeczku/calibre-web/wiki/Dependencies-in-Calibre-Web-Linux-and-Windows" target="_blank" rel="noopener"
>https://github.com/janeczku/calibre-web/wiki/Dependencies-in-Calibre-Web-Linux-and-Windows&lt;/a>
这里也有提到
&lt;a class="link" href="https://chenjiehua.me/others/calibre-web-personal-book-store.html" target="_blank" rel="noopener"
>https://chenjiehua.me/others/calibre-web-personal-book-store.html&lt;/a>&lt;/p>
&lt;pre>&lt;code>pip install calibreweb
pip install calibreweb[metadata]
&lt;/code>&lt;/pre>
&lt;h3 id="装imagemagick">装imagemagick
&lt;/h3>&lt;p>然后安装imagemagick
官方：
&lt;a class="link" href="https://imagemagick.org/script/download.php" target="_blank" rel="noopener"
>https://imagemagick.org/script/download.php&lt;/a>
也有提到：
&lt;a class="link" href="https://www.cnblogs.com/echohye/p/17727865.html" target="_blank" rel="noopener"
>https://www.cnblogs.com/echohye/p/17727865.html&lt;/a>&lt;/p>
&lt;pre>&lt;code>apt install imagemagick
&lt;/code>&lt;/pre>
&lt;p>装完后&lt;code>convert&lt;/code>和&lt;code>magick&lt;/code>命令应当是可用的&lt;/p>
&lt;h3 id="手动装imagemagick">手动装imagemagick
&lt;/h3>&lt;p>或者我用上面官方的magick文件手动配貌似也行：
先把magick文件放入根目录&lt;/p>
&lt;pre>&lt;code>./magick --appimage-extract
&lt;/code>&lt;/pre>
&lt;p>&lt;a class="link" href="https://docs.appimage.org/user-guide/troubleshooting/fuse.html" target="_blank" rel="noopener"
>https://docs.appimage.org/user-guide/troubleshooting/fuse.html&lt;/a>
提到了可以用&lt;code>--appimage-extract&lt;/code>直接释放出软件包来
会发现释放出来文件在&lt;code>/squashfs-root&lt;/code>目录里
设置环境变量：&lt;/p>
&lt;pre>&lt;code>export MAGICK_HOME=&amp;quot;/squashfs-root/usr&amp;quot;
export PATH=&amp;quot;$MAGICK_HOME/bin:$PATH&amp;quot;
export LD_LIBRARY_PATH=&amp;quot;${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$MAGICK_HOME/lib&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>然后imagemagick应该就能用了。。&lt;/p>
&lt;h3 id="其他">其他
&lt;/h3>&lt;p>&lt;code>lscr.io/linuxserver/calibre-web:latest&lt;/code>
这个镜像也不小，但功能还算完整，上传pdf可直接显示封面，但不是中文环境，而且部署到我的nas上后死活传不了新书说什么无法写入，懒得深究了，弃之&lt;/p></description></item><item><title>给docker容器内配置中文环境(minecraft开服相关)</title><link>https://winotmk.github.io/posts/240815_%E7%BB%99docker%E5%AE%B9%E5%99%A8%E5%86%85%E9%85%8D%E7%BD%AE%E4%B8%AD%E6%96%87%E7%8E%AF%E5%A2%83/</link><pubDate>Thu, 15 Aug 2024 00:00:00 +0000</pubDate><guid>https://winotmk.github.io/posts/240815_%E7%BB%99docker%E5%AE%B9%E5%99%A8%E5%86%85%E9%85%8D%E7%BD%AE%E4%B8%AD%E6%96%87%E7%8E%AF%E5%A2%83/</guid><description>&lt;p>最近找到个整合包（因为懒得一个个翻bbs
&lt;a class="link" href="https://www.bilibili.com/read/cv7403697/?spm_id_from=333.999.collection.opus.click" target="_blank" rel="noopener"
>https://www.bilibili.com/read/cv7403697/?spm_id_from=333.999.collection.opus.click&lt;/a>
&lt;img src="https://winotmk.github.io/images/20240815141238.png"
loading="lazy"
>
这包里的mod和之前自己开的服务器高度相似，太棒啦，从1.7.10直升1.12.2，基本还都是熟悉的味道
才知道mcbbs已经无了，然后才可发现mc百科已经这么好用了，连接直连发布curseforge和github，省去搬运步骤，也蛮好的！
服务端有了，想通过docker容器部署到我的群晖NAS上，DS720+扩容了根16G内存条放着也是放着&lt;/p>
&lt;h2 id="选取docker镜像">选取docker镜像
&lt;/h2>&lt;p>docker hub里有官方镜像，用的是这个，体积精简，只运行环境jre就够了
&lt;a class="link" href="https://hub.docker.com/_/openjdk/tags?page=1&amp;amp;page_size=&amp;amp;name=8u342&amp;amp;ordering=" target="_blank" rel="noopener"
>https://hub.docker.com/_/openjdk/tags?page=1&amp;page_size=&amp;name=8u342&amp;ordering=&lt;/a>
&lt;img src="https://winotmk.github.io/images/20240815121544.png"
loading="lazy"
>
所以直接&lt;/p>
&lt;pre>&lt;code>docker pull openjdk:8u342-jre-slim
&lt;/code>&lt;/pre>
&lt;p>然后直接这样运行就好了&lt;/p>
&lt;pre>&lt;code>docker run -it -d \
-p 25565:25565 \
-v E:\game\MC\1.12.2mohist_服务端:/mc \
-w /mc \
--name MC1122 \
openjdk:8u342-jre-slim \
java -Xms2G -Xmx8G -XX:+UseG1GC -XX:+AggressiveOpts -XX:+UseCompressedOops -jar Mohist-1.12.2-c950429-server.jar nogui
&lt;/code>&lt;/pre>
&lt;p>虽然长，但是总的来说挺简单，用&lt;code>openjdk:8u342-jre-slim&lt;/code>镜像运行&lt;code>java&lt;/code>命令罢了，但是！
出现了一个人让人感觉不爽的小问题，服务端的log输出以及游戏内服务端来的输出都是英文的，这在之前直接windows运行时不是这样的，所以第一反应是语言环境问题
&lt;img src="https://winotmk.github.io/images/20240815123217.png"
loading="lazy"
>
&lt;img src="https://winotmk.github.io/images/20240815123240.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="设置环境变量">设置环境变量
&lt;/h2>&lt;p>在&lt;code>docker run&lt;/code>的时候加上个参数&lt;code>-e LANG=&amp;quot;zh_CN.UTF-8&amp;quot;&lt;/code>，类似&lt;code>export LANG=zh_CN.UTF-8&lt;/code>
确定环境变量生效了：
&lt;img src="https://winotmk.github.io/images/20240815123341.png"
loading="lazy"
>
但没解决问题，反而似乎导致启动的时候不认识中文的mod文件名了&lt;/p>
&lt;p>在查找这个之后：&lt;a class="link" href="https://blog.csdn.net/myli92/article/details/139909499?csdn_share_tail=%7B%22type%22%3A%22blog%22%2C%22rType%22%3A%22article%22%2C%22rId%22%3A%22139909499%22%2C%22source%22%3A%22unlogin%22%7D" target="_blank" rel="noopener"
>docker 容器设置中文环境&lt;/a>
发现单纯设置&lt;code>LANG&lt;/code>的变量不行，容器里就没有中文字符集的&lt;/p>
&lt;h3 id="查看已有语言">查看已有语言
&lt;/h3>&lt;pre>&lt;code>locale -a
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://winotmk.github.io/images/20240815123200.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="安装中文环境">安装中文环境
&lt;/h3>&lt;p>&lt;a class="link" href="https://blog.csdn.net/star1210644725/article/details/108747049" target="_blank" rel="noopener"
>使用DockerFile的方式快速构建一个基础镜像，解决中文环境问题&lt;/a>
所以安装中文环境的命令可以是：&lt;/p>
&lt;pre>&lt;code>apt-get install -y language-pack-zh-hans
&lt;/code>&lt;/pre>
&lt;p>但这样不行！因为这个是ubuntu的命令，查看我的docker镜像的信息发现是以debian基底的
&lt;img src="https://winotmk.github.io/images/20240815132128.png"
loading="lazy"
>&lt;/p>
&lt;p>看到:&lt;a class="link" href="https://blog.csdn.net/forever_008/article/details/103720389" target="_blank" rel="noopener"
>Debian系统安装中文包&lt;/a>&lt;/p>
&lt;pre>&lt;code>dpkg-reconfigure locales
&lt;/code>&lt;/pre>
&lt;p>然后再选&lt;code>zh_CN.UTF-8&lt;/code>，可行，但是集成到镜像里没那么好使，还好有别的方法&lt;/p>
&lt;h2 id="制作新镜像">制作新镜像
&lt;/h2>&lt;p>参考：&lt;a class="link" href="https://blog.csdn.net/wyazyf/article/details/90676364" target="_blank" rel="noopener"
>dockerfile文件中给debian设置中文支持&lt;/a>&lt;/p>
&lt;h3 id="dockerfile">dockerfile
&lt;/h3>&lt;pre>&lt;code>FROM openjdk:8u342-jre-slim
RUN apt-get clean &amp;amp;&amp;amp; apt-get update &amp;amp;&amp;amp; apt-get install -y locales &amp;amp;&amp;amp; localedef -c -f UTF-8 -i zh_CN zh_CN.utf8
WORKDIR /mc
ENV LANG zh_CN.UTF-8
&lt;/code>&lt;/pre>
&lt;p>保存为dockerfile文件然后&lt;/p>
&lt;pre>&lt;code>docker build -t jre8u342_ch .
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://winotmk.github.io/images/20240815123827.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="测试运行">测试运行
&lt;/h3>&lt;pre>&lt;code>docker run -it -d \
-p 25565:25565 \
-v E:\game\MC\1.12.2mohist_服务端:/mc \
--name MC1122 \
jre8u342_ch:latest \
java -Xms2G -Xmx8G -XX:+UseG1GC -XX:+AggressiveOpts -XX:+UseCompressedOops -jar Mohist-1.12.2-c950429-server.jar nogui
&lt;/code>&lt;/pre>
&lt;p>因为dockerfile里已经设置过&lt;code>WORKDIR&lt;/code>了所以不需要&lt;code>-w&lt;/code>参数&lt;/p>
&lt;p>这下不会报英文了
&lt;img src="https://winotmk.github.io/images/20240815124038.png"
loading="lazy"
>
&lt;img src="https://winotmk.github.io/images/20240815124056.png"
loading="lazy"
>
游戏里也是中文环境的返回信息
&lt;img src="https://winotmk.github.io/images/20240815124137.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="部署到群晖">部署到群晖
&lt;/h2>&lt;p>先把做好的镜像打包出来，方便传到群晖NAS里&lt;/p>
&lt;pre>&lt;code>docker save -o jre8u342_ch.tar jre8u342_ch:latest
&lt;/code>&lt;/pre>
&lt;p>先导入这个镜像
&lt;img src="https://winotmk.github.io/images/20240815132343.png"
loading="lazy"
>
然后简单配置一下端口和mc服务器目录就可以了,和上面的&lt;code>docker run&lt;/code>其实是一样的
&lt;img src="https://winotmk.github.io/images/20240815132446.png"
loading="lazy"
>
端口的&lt;code>25565&lt;/code>是游戏端口&lt;code>25575&lt;/code>用作管理，下面会提到&lt;/p>
&lt;h2 id="服务器远程管理">服务器远程管理
&lt;/h2>&lt;p>用容器托管运行了，上哪去敲&lt;code>/op xxxx&lt;/code>和&lt;code>/stop&lt;/code>之类的管理命令呢？
可以用rcon方案！
&lt;a class="link" href="https://wiki.vg/RCON" target="_blank" rel="noopener"
>https://wiki.vg/RCON&lt;/a>
具体就是用这个软件：
&lt;a class="link" href="https://github.com/Tiiffi/mcrcon" target="_blank" rel="noopener"
>https://github.com/Tiiffi/mcrcon&lt;/a>&lt;/p>
&lt;h3 id="安装和服务端配置">安装和服务端配置：
&lt;/h3>&lt;pre>&lt;code>git clone https://github.com/Tiiffi/mcrcon.git
cd mcrcon
make
sudo make install
&lt;/code>&lt;/pre>
&lt;p>然后服务端也要配置一下，在&lt;code>server.properties&lt;/code>里的&lt;/p>
&lt;pre>&lt;code>enable-rcon=false
&lt;/code>&lt;/pre>
&lt;p>改为&lt;/p>
&lt;pre>&lt;code>enable-rcon=true
rcon.password=your_passwd
rcon.port=25575
&lt;/code>&lt;/pre>
&lt;h3 id="用法">用法：
&lt;/h3>&lt;p>先连接&lt;/p>
&lt;pre>&lt;code>mcrcon -H 服务器地址 -p your_passwd
&lt;/code>&lt;/pre>
&lt;p>然后就可以一样敲各种minecraft管理命令了&lt;/p>
&lt;p>&lt;img src="https://winotmk.github.io/images/20240815125134.png"
loading="lazy"
>&lt;/p>
&lt;p>好了不说了博主我要去挖矿开荒了
&lt;img src="https://winotmk.github.io/images/20240815133408.png"
loading="lazy"
>
&lt;img src="https://winotmk.github.io/images/20240815133429.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="参考">参考
&lt;/h2>&lt;p>debian文档，第 8 章 国际化和本地化：
&lt;a class="link" href="https://www.debian.org/doc/manuals/debian-reference/ch08.zh-cn.html#_rationale_for_utf_8_locale" target="_blank" rel="noopener"
>https://www.debian.org/doc/manuals/debian-reference/ch08.zh-cn.html#_rationale_for_utf_8_locale&lt;/a>&lt;/p>
&lt;p>类似的打包好的docker环境MC服务器镜像有：
&lt;a class="link" href="https://github.com/itzg/docker-minecraft-server/tree/master" target="_blank" rel="noopener"
>https://github.com/itzg/docker-minecraft-server/tree/master&lt;/a>
对我来说功能有点多，只是参考参考&lt;/p></description></item><item><title>Linux和docker常用命令</title><link>https://winotmk.github.io/posts/240619_linux%E5%91%BD%E4%BB%A4/</link><pubDate>Wed, 19 Jun 2024 00:00:00 +0000</pubDate><guid>https://winotmk.github.io/posts/240619_linux%E5%91%BD%E4%BB%A4/</guid><description>&lt;p>还是会有很多不常用的命令要来回查，仅记录，绝非完整命令参考&lt;/p>
&lt;h2 id="文件操作相关">文件操作相关
&lt;/h2>&lt;h3 id="复制目录">复制目录
&lt;/h3>&lt;p>复制目录dir1和dir1目录下的文件到dir2目录里&lt;/p>
&lt;pre>&lt;code>cp -r dir1 dir2
&lt;/code>&lt;/pre>
&lt;p>安装lrzsz实现zmodem串口文件传输&lt;/p>
&lt;pre>&lt;code>rz 下载Zmodem
xz 上传Zmodem
&lt;/code>&lt;/pre>
&lt;p>windterm下支持直接拖拽文件，但是也要安装lrzsz以支持命令
&lt;a class="link" href="https://www.cnblogs.com/lidabo/p/4780866.html" target="_blank" rel="noopener"
>https://www.cnblogs.com/lidabo/p/4780866.html&lt;/a>&lt;/p>
&lt;h3 id="挂载u盘">挂载U盘
&lt;/h3>&lt;pre>&lt;code>fdisk -l
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://winotmk.github.io/images/20240619152526.png"
loading="lazy"
>
可以看到一块14.84GB的SD卡，位置在&lt;code>/dev/sda1&lt;/code>
使用&lt;/p>
&lt;pre>&lt;code>mount -t vfat /dev/sda1 /mnt
&lt;/code>&lt;/pre>
&lt;p>来挂载U盘
&lt;img src="https://winotmk.github.io/images/20240619152710.png"
loading="lazy"
>
&lt;code>cd&lt;/code>到&lt;code>/mnt&lt;/code>即可看到U盘里的文件了，另外可以在&lt;code>/mnt&lt;/code>里新建文件夹&lt;code>mkdir xxxxx&lt;/code>，再挂载到文件夹里&lt;/p>
&lt;p>卸载：&lt;/p>
&lt;pre>&lt;code>umount /mnt
&lt;/code>&lt;/pre>
&lt;h3 id="打包压缩和解压">打包压缩和解压
&lt;/h3>&lt;p>压缩&lt;/p>
&lt;pre>&lt;code>tar -czvf ***.tar.gz
&lt;/code>&lt;/pre>
&lt;p>解压&lt;/p>
&lt;pre>&lt;code>tar -xzvf ***.tar.gz
&lt;/code>&lt;/pre>
&lt;h3 id="docker">docker
&lt;/h3>&lt;p>&lt;a class="link" href="https://yeasy.gitbook.io/docker_practice/container/run" target="_blank" rel="noopener"
>https://yeasy.gitbook.io/docker_practice/container/run&lt;/a>&lt;/p>
&lt;p>启动docker:&lt;/p>
&lt;pre>&lt;code>sudo systemctl start docker
&lt;/code>&lt;/pre>
&lt;p>查看已有镜像：&lt;/p>
&lt;pre>&lt;code>docker ps -a
&lt;/code>&lt;/pre>
&lt;p>启动已终止容器:&lt;/p>
&lt;pre>&lt;code>docker container start
&lt;/code>&lt;/pre>
&lt;p>运行新的镜像run：&lt;/p>
&lt;pre>&lt;code>docker run -it -d --name hexo_debian -p 22:22 -p 4000:4000 -v XXX:/hexo/ hexo_debian:V02
&lt;/code>&lt;/pre>
&lt;p>save:
把本地镜像打包成tar方便带走&lt;/p>
&lt;pre>&lt;code>docker save -o jre8u342_ch.tar jre8u342_ch:latest
&lt;/code>&lt;/pre>
&lt;p>打包好的tar用的时候可以：&lt;/p>
&lt;pre>&lt;code>docker load -i {image_name}.tar
docker load --input {image_name}.tar
&lt;/code>&lt;/pre>
&lt;p>如果没有tag可以手动打tag~&lt;/p>
&lt;pre>&lt;code>docker tag {image_id} {image_name}:{image_tag}
&lt;/code>&lt;/pre>
&lt;p>自用的docker run:&lt;/p>
&lt;pre>&lt;code>docker run -d --name=calibre-web -e PUID=1000 -e PGID=1000 -e TZ=Etc/UTC -e DOCKER_MODS=linuxserver/mods:universal-calibre -p 8083:8083 -v D:\calibre_test\config:/config -v D:\calibre_test\library:/books --restart unless-stopped lscr.io/linuxserver/calibre-web:latest
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>docker run -d --name=calibre -e PUID=1000 -e PGID=1000 -e TZ=Asia/Shanghai -e LC_ALL=zh_CN.UTF-8 -p 8080:8080 -p 8181:8181 -p 8081:8081 -v D:\calibre_test\library:/library -v D:\calibre_test\config:/config --restart unless-stopped lscr.io/linuxserver/calibre:latest
&lt;/code>&lt;/pre>
&lt;!-- more -->
&lt;h4 id="docker-compose">docker compose
&lt;/h4>&lt;p>启动组
&lt;code>docker compose -f hexo_debian_DockerCompose.yml up -d &lt;/code>
关闭组
&lt;code>docker compose -f hexo_debian_DockerCompose.yml down -v&lt;/code>
启动但是会留在容器里
&lt;code>docker compose up&lt;/code>
启动不留在容器里
&lt;code>docker compose up -d&lt;/code>
进入docker容器&lt;/p>
&lt;pre>&lt;code>docker exec -it XXX /bin/bash
&lt;/code>&lt;/pre>
&lt;p>退出容器但保留按&lt;code>ctrl+P+Q&lt;/code>
也可以直接接要在容器里执行的命令&lt;/p>
&lt;pre>&lt;code>docker exec hexo hexo g -d
&lt;/code>&lt;/pre>
&lt;p>拷贝容器内的文件出来，在宿主机上输入：&lt;/p>
&lt;pre>&lt;code>docker cp -a vsftpd:/etc/services /root/
&lt;/code>&lt;/pre>
&lt;h3 id="screen">screen
&lt;/h3>&lt;pre>&lt;code># 创建一个新的窗口
screen -S test
# 进入窗口后 执行文件
python test.py
# 退出当前窗口
ctrl+a+d （方法1：保留当前窗口）
screen -d （方法2：保留当前窗口）
exit （方法3：退出程序，并关闭窗口）
# 查看窗口
screen -ls
# 重新连接窗口
screen -r id或窗口名称
&lt;/code>&lt;/pre></description></item><item><title>地理数据采集器计划</title><link>https://winotmk.github.io/posts/240617_%E5%9C%B0%E7%90%86%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%99%A8%E8%AE%A1%E5%88%92/</link><pubDate>Mon, 17 Jun 2024 00:00:00 +0000</pubDate><guid>https://winotmk.github.io/posts/240617_%E5%9C%B0%E7%90%86%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%99%A8%E8%AE%A1%E5%88%92/</guid><description>&lt;h2 id="简介">简介
&lt;/h2>&lt;p>想要做一个便携的小设备，能够实现以下功能&lt;/p>
&lt;ul>
&lt;li>记录当前地点的气压，温度，湿度等地理信息&lt;/li>
&lt;li>记录GPS坐标信息&lt;/li>
&lt;li>考虑加上摄像头记录当前周围视觉环境，同时可以将上述信息水印（字幕)在照片上&lt;/li>
&lt;li>存储所有记录的数据以便之后进行可视化数据生成，可以用类似XML，Json，或者找有没有嵌入式轻量数据库实现&lt;/li>
&lt;/ul>
&lt;p>它最好有以下这样的特点：&lt;/p>
&lt;ul>
&lt;li>手机一般大小可以塞进口袋&lt;/li>
&lt;li>一定程度的防摔防水外壳&lt;/li>
&lt;li>续航可以接受2-3天一充电&lt;/li>
&lt;/ul>
&lt;p>所以我的打算用现有的能买到的小板子和单片机来做，预算不是大问题，大概1500-2000，（包含试错和学习成本）考虑过几种方向：&lt;/p>
&lt;ul>
&lt;li>ESP32&lt;/li>
&lt;li>树莓派PICO&lt;/li>
&lt;li>幸狐的板子和摄像头&lt;/li>
&lt;li>树莓派Zero
最后发现现在目前树莓派zero2w的价格只有一百出头了，可能比某些arduino的原版板子还便宜，值得一试，幸狐看起来也不错的样子，回头再研究&lt;/li>
&lt;/ul>
&lt;p>下面这是树莓派zero2w跑通串口通信时的样子&lt;/p>
&lt;p>&lt;img src="https://winotmk.github.io/images/20240617150029.png"
loading="lazy"
>&lt;/p>
&lt;!-- more -->
&lt;p>这个网站不错：https://pinout.xyz/&lt;/p>
&lt;p>&lt;img src="https://winotmk.github.io/images/20240618185812.png"
loading="lazy"
>&lt;/p>
&lt;p>可知右上这几个接口就可以实现TTL的UART连接了，我尝试ground是要接的&lt;/p>
&lt;h2 id="资料">资料
&lt;/h2>&lt;h3 id="ft232串口工具">FT232串口工具
&lt;/h3>&lt;p>&lt;a class="link" href="https://www.waveshare.net/wiki/FT232_USB_UART_Board" target="_blank" rel="noopener"
>https://www.waveshare.net/wiki/FT232_USB_UART_Board&lt;/a>
&lt;img src="https://winotmk.github.io/images/20240619160444.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="gps模块">GPS模块
&lt;/h3>&lt;p>&lt;a class="link" href="https://www.waveshare.net/wiki/LC76G_GPS_Module" target="_blank" rel="noopener"
>https://www.waveshare.net/wiki/LC76G_GPS_Module&lt;/a>
&lt;img src="https://winotmk.github.io/images/20240619160514.png"
loading="lazy"
>
在准备安装micropyGPS时
&lt;img src="https://winotmk.github.io/images/20240619160324.png"
loading="lazy"
>
提示&lt;code>No module namd setuptools&lt;/code>
怀疑需要执行
&lt;code>apt-get install python3-setuptools&lt;/code>
可惜目前没有网络环境，回家尝试了&lt;/p>
&lt;h3 id="raspberry-zero-2w">Raspberry Zero 2W
&lt;/h3>&lt;p>&lt;a class="link" href="https://www.waveshare.net/wiki/Raspberry_Pi_Zero_2_W" target="_blank" rel="noopener"
>https://www.waveshare.net/wiki/Raspberry_Pi_Zero_2_W&lt;/a>
&lt;img src="https://winotmk.github.io/images/20240619160629.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="ups-模块">UPS 模块
&lt;/h3>&lt;p>&lt;a class="link" href="https://www.waveshare.net/wiki/UPS_HAT_%28C%29" target="_blank" rel="noopener"
>https://www.waveshare.net/wiki/UPS_HAT_(C)&lt;/a>
&lt;img src="https://winotmk.github.io/images/20240619160718.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="环境传感器">环境传感器
&lt;/h3>&lt;p>&lt;a class="link" href="https://www.waveshare.net/shop/Environment-Sensor-HAT.htm" target="_blank" rel="noopener"
>https://www.waveshare.net/shop/Environment-Sensor-HAT.htm&lt;/a>
&lt;img src="https://winotmk.github.io/images/20240619160754.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="项目软件">项目/软件
&lt;/h2>&lt;h3 id="数据可视化相关">数据可视化相关
&lt;/h3>&lt;h4 id="很不错的开源教程data-science-for-beginners">很不错的开源教程Data-Science-For-Beginners
&lt;/h4>&lt;p>&lt;a class="link" href="https://microsoft.github.io/Data-Science-For-Beginners/#/" target="_blank" rel="noopener"
>https://microsoft.github.io/Data-Science-For-Beginners/#/&lt;/a>&lt;/p>
&lt;h4 id="matplotlib">Matplotlib
&lt;/h4>&lt;p>&lt;a class="link" href="https://matplotlib.org/stable/index.html" target="_blank" rel="noopener"
>https://matplotlib.org/stable/index.html&lt;/a>
Matplotlib是一个出色的库，可用于创建各种简单和复杂的图表
&lt;a class="link" href="https://microsoft.github.io/Data-Science-For-Beginners/#/3-Data-Visualization/09-visualization-quantities/README" target="_blank" rel="noopener"
>https://microsoft.github.io/Data-Science-For-Beginners/#/3-Data-Visualization/09-visualization-quantities/README&lt;/a>
&lt;img src="https://winotmk.github.io/images/20240717142402.png"
loading="lazy"
>&lt;/p>
&lt;h4 id="streamlit">Streamlit
&lt;/h4>&lt;p>&lt;a class="link" href="https://github.com/streamlit/streamlit" target="_blank" rel="noopener"
>https://github.com/streamlit/streamlit&lt;/a>
&lt;img src="https://winotmk.github.io/images/20240717143550.png"
loading="lazy"
>
更偏向于python库直接生成web，同时也有很多数据可视化的内容，更实用？便于展示&lt;/p>
&lt;h4 id="powerbi">powerbi
&lt;/h4>&lt;p>&lt;a class="link" href="https://www.microsoft.com/en-us/power-platform/products/power-bi" target="_blank" rel="noopener"
>https://www.microsoft.com/en-us/power-platform/products/power-bi&lt;/a>
似乎是微软的web数据可视化绘图&lt;/p>
&lt;h4 id="gpxsee">GPXSee
&lt;/h4>&lt;p>配合gps数据收集可以展示出来
&lt;a class="link" href="https://github.com/tumic0/GPXSee" target="_blank" rel="noopener"
>https://github.com/tumic0/GPXSee&lt;/a>
&lt;img src="https://winotmk.github.io/images/20240719120310.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="图形库">图形库
&lt;/h3>&lt;h4 id="lvgl">LVGL
&lt;/h4>&lt;p>&lt;a class="link" href="https://lvgl.100ask.net/master/get-started/index.html" target="_blank" rel="noopener"
>https://lvgl.100ask.net/master/get-started/index.html&lt;/a>
&lt;a class="link" href="https://github.com/lvgl/lvgl" target="_blank" rel="noopener"
>https://github.com/lvgl/lvgl&lt;/a>
&lt;img src="https://winotmk.github.io/images/20240719122911.png"
loading="lazy"
>&lt;/p>
&lt;h4 id="squareline-studio-ui---配合上面的lvgl用">SquareLine Studio UI - 配合上面的LVGL用
&lt;/h4>&lt;p>&lt;a class="link" href="https://squareline.io/" target="_blank" rel="noopener"
>https://squareline.io/&lt;/a>
&lt;a class="link" href="https://www.bilibili.com/video/BV1DX4y1v727/?vd_source=b7b7bdf106a064893c3c79e4a961f383" target="_blank" rel="noopener"
>https://www.bilibili.com/video/BV1DX4y1v727/?vd_source=b7b7bdf106a064893c3c79e4a961f383&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://winotmk.github.io/images/20240719121330.png"
loading="lazy"
>&lt;/p>
&lt;h4 id="guiguider-同上类别但免费">guiguider 同上类别但免费
&lt;/h4>&lt;p>&lt;a class="link" href="https://www.bilibili.com/video/BV1yW421R7zK/?spm_id_from=333.788.recommend_more_video.7&amp;amp;vd_source=b7b7bdf106a064893c3c79e4a961f383" target="_blank" rel="noopener"
>https://www.bilibili.com/video/BV1yW421R7zK/?spm_id_from=333.788.recommend_more_video.7&amp;vd_source=b7b7bdf106a064893c3c79e4a961f383&lt;/a>
&lt;img src="https://winotmk.github.io/images/20240719122655.png"
loading="lazy"
>&lt;/p>
&lt;h4 id="figma">figma
&lt;/h4>&lt;p>UI前期设计软件
&lt;img src="https://winotmk.github.io/images/20240719121825.png"
loading="lazy"
>&lt;/p>
&lt;h4 id="ui-框架oled-ui-astra">UI 框架：oled-ui-astra
&lt;/h4>&lt;p>&lt;a class="link" href="https://github.com/AstraThreshold/oled-ui-astra" target="_blank" rel="noopener"
>https://github.com/AstraThreshold/oled-ui-astra&lt;/a>
&lt;a class="link" href="https://www.bilibili.com/video/BV1i4421D7nJ/?vd_source=b7b7bdf106a064893c3c79e4a961f383" target="_blank" rel="noopener"
>https://www.bilibili.com/video/BV1i4421D7nJ/?vd_source=b7b7bdf106a064893c3c79e4a961f383&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://winotmk.github.io/images/20240719120151.png"
loading="lazy"
>&lt;/p></description></item><item><title>令人头疼的vsftpd,ftp端口修改设置配置</title><link>https://winotmk.github.io/posts/240617_%E4%BB%A4%E4%BA%BA%E5%A4%B4%E7%96%BC%E7%9A%84vsftpd/</link><pubDate>Mon, 17 Jun 2024 00:00:00 +0000</pubDate><guid>https://winotmk.github.io/posts/240617_%E4%BB%A4%E4%BA%BA%E5%A4%B4%E7%96%BC%E7%9A%84vsftpd/</guid><description>&lt;p>这么个小小的软件花费了不成正比的时间去弄他，十分令人头疼，简单记录几点重要的设置&lt;/p>
&lt;pre>&lt;code>vim /etc/vsftpd.conf
&lt;/code>&lt;/pre>
&lt;p>vsftpd 配置文件：
&lt;a class="link" href="https://gnu-linux.readthedocs.io/zh/latest/Chapter02/90_vsftpd.html" target="_blank" rel="noopener"
>https://gnu-linux.readthedocs.io/zh/latest/Chapter02/90_vsftpd.html&lt;/a>&lt;/p>
&lt;h2 id="修改ftp的端口">修改ftp的端口
&lt;/h2>&lt;p>ftp的监听和实际数据传输是两个端口，如果要改最好都改&lt;/p>
&lt;pre>&lt;code>connect_from_port_20=NO
ftp_data_port=12520
listen_port=12521
&lt;/code>&lt;/pre>
&lt;p>pasv模式时的端口范围设置，假如用docker运行这些端口都要转出来&lt;/p>
&lt;pre>&lt;code>pasv_promiscuous=YES
pasv_min_port=31100
pasv_max_port=31110
&lt;/code>&lt;/pre>
&lt;p>我至今没太搞明白ftp的主动与被动模式的区别，以及能不能只用其中一种模式来工作..&lt;/p>
&lt;p>另外还有系统的services里&lt;/p>
&lt;pre>&lt;code>vim /etc/services
#ftp-data 20/tcp
#ftp-data 20/udp
ftp-data 12520/tcp
ftp-data 12520/udp
&lt;/code>&lt;/pre>
&lt;p>这个不确定是否必要但还是改了吧&lt;/p>
&lt;h2 id="中文乱码">中文乱码
&lt;/h2>&lt;p>&lt;img src="https://winotmk.github.io/images/20240617155755.png"
loading="lazy"
>&lt;/p>
&lt;p>一篇不错的配置说明
&lt;a class="link" href="https://blog.starryvoid.com/archives/1044.html" target="_blank" rel="noopener"
>https://blog.starryvoid.com/archives/1044.html&lt;/a>
主要提到了utf8的编码问题&lt;/p>
&lt;p>&lt;code>utf8_filesystem=YES&lt;/code>&lt;/p>
&lt;p>如果这样还没解决，考虑是要修改容器本身的&lt;code>LANG&lt;/code>
可以直接进入容器然后类似：
export LANG=C.UTF-8
或者
export LANG=en_US.UTF-8
输入locale查看结果
当然这样关了这个sh就没了，所以可以直接加到docker启动时的环境变量里
&lt;a class="link" href="https://zihengcat.github.io/2018/09/10/change-locale-system-encoding-in-docker-container/" target="_blank" rel="noopener"
>https://zihengcat.github.io/2018/09/10/change-locale-system-encoding-in-docker-container/&lt;/a>
然后你猜怎么着，做完这些设置以后中文依然显示为乱码，但是在FileZilla里看却没问题&lt;/p>
&lt;p>&lt;img src="https://winotmk.github.io/images/20240618170337.png"
loading="lazy"
>&lt;/p>
&lt;p>现在高度怀疑是VScode的这个SFTP同步插件的锅&lt;/p></description></item><item><title>StableDiffusion大模型(Dreambooth)云上训练以及安装CODA指定版本</title><link>https://winotmk.github.io/posts/240110_sd%E5%A4%A7%E6%A8%A1%E5%9E%8B%E4%BA%91%E4%B8%8A%E8%AE%AD%E7%BB%83/</link><pubDate>Thu, 11 Jan 2024 00:00:00 +0000</pubDate><guid>https://winotmk.github.io/posts/240110_sd%E5%A4%A7%E6%A8%A1%E5%9E%8B%E4%BA%91%E4%B8%8A%E8%AE%AD%E7%BB%83/</guid><description>&lt;h2 id="创建阿里云pai-dsw实例跑kohya">创建阿里云PAI DSW实例跑kohya
&lt;/h2>&lt;p>镜像我这里选：
&lt;img src="https://winotmk.github.io/images/20240110174810.png"
loading="lazy"
>
&lt;code>dsw-registry-vpc.cn-shanghai.cr.aliyuncs.com/pai/modelscope:1.10.0-pytorch2.1.0tensorflow2.14.0-gpu-py310-cu118-ubuntu22.04&lt;/code>
我这里用默认的镜像，实测截至2024.01.10时，直接拉kohya的github可以直接用，不需要改动cuda之类的操作&lt;/p>
&lt;h3 id="安装kohya_ss">安装kohya_ss
&lt;/h3>&lt;p>kohya_ss仓库地址：
&lt;a class="link" href="https://github.com/bmaltais/kohya_ss" target="_blank" rel="noopener"
>https://github.com/bmaltais/kohya_ss&lt;/a>
kohya_ss是个webui训练器，SD web_ui里也有对应的Dreambooth训练插件移植，如果只拿来训练不需要跑完整的sd webui服务，只需要kohya就可以了,kohay也可以练lora
在workspace根目录直接：&lt;/p>
&lt;pre>&lt;code>git clone https://github.com/bmaltais/kohya_ss.git
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://winotmk.github.io/images/20240110175054.png"
loading="lazy"
>&lt;/p>
&lt;!-- more -->
&lt;p>很快就能完成，接着依次执行&lt;/p>
&lt;pre>&lt;code class="language-bash">cd ./kohya_ss
apt update -y &amp;amp;&amp;amp; apt install -y python3-tk
chmod +x ./setup.sh
./setup.sh
&lt;/code>&lt;/pre>
&lt;p>虽然镜像里带py310，但是似乎还是要装一下python3-tk
之后安装脚本会自动完成，我大概花了5分钟
&lt;img src="https://winotmk.github.io/images/20240110193312.png"
loading="lazy"
>
然后运行启动webui&lt;/p>
&lt;pre>&lt;code>HF_ENDPOINT=https://hf-mirror.com ./gui.sh --headless
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://winotmk.github.io/images/20240111114153.png"
loading="lazy"
>
点击这个本地的IP即能点开webui了
&lt;code>HF_ENDPOINT=https://hf-mirror.com&lt;/code>是为了防止抱脸会更新卡住而用的镜像网站（我确实因为这个卡过）或者见本站另一篇专门说代理的文章：
&lt;a class="link" href="https://winotmk.github.io/240109_Linux%E4%B8%8A%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7/" target="_blank" rel="noopener"
>https://winotmk.github.io/240109_Linux%E4%B8%8A%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7/&lt;/a>&lt;/p>
&lt;h2 id="kohya_ss的dreambooth训练参数">kohya_ss的Dreambooth训练参数
&lt;/h2>&lt;h3 id="source-model">source model
&lt;/h3>&lt;p>&lt;img src="https://winotmk.github.io/images/20240111114635.png"
loading="lazy"
>
我这里用自己上传的模型，可以先上传至阿里云oss再挂载进来，所以这里这样选，然后填模型路径就好了&lt;/p>
&lt;h3 id="floders">floders
&lt;/h3>&lt;p>这个tag里比较简单，没什么好说的
Image folder里写上训练集目录，注意写上的目录底下应该是例如10_ABC目录，然后再放图和txt文件，这个10就step的10，和lora训练时候一样&lt;/p>
&lt;h3 id="parameters">parameters
&lt;/h3>&lt;p>&lt;img src="https://winotmk.github.io/images/20240111115115.png"
loading="lazy"
>&lt;/p>
&lt;h4 id="basic">basic
&lt;/h4>&lt;p>和lora训练设置大同小异，但是参数要比lora小得多，因为Dreambooth比lora性能消耗要大得多而且非常容易过拟合，图出来一滩浆糊，比如我尝试epoch可能10以内就足够，由于文件比较大Save every N epochs我一般也就3-4，其他参数看个人需求吧&lt;/p>
&lt;h4 id="samples">samples
&lt;/h4>&lt;p>这里能填关键词和每多少轮出个预览图，玩玩用
都准备好了就可以点 &lt;code>start training&lt;/code>，但webui不会有任何提示..要看之前启webui的终端
这样就是开始训练了：
&lt;img src="https://winotmk.github.io/images/20240111121059.png"
loading="lazy"
>
不过我第一次成功启动了webui但是点开始训练以后，报过类似这样的错：&lt;/p>
&lt;pre>&lt;code>The following directories listed in your path were found to be non-existent: {PosixPath('/usr/local/nvidia/lib64'), PosixPath('/usr/local/nvidia/lib')}
/usr/local/lib/python3.10/dist-packages/bitsandbytes/cuda_setup/main.py:166: UserWarning: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/local/cuda-11 did not contain ['libcudart.so', 'libcudart.so.11.0', 'libcudart.so.12.0'] as expected! Searching further paths...
warn(msg)
The following directories listed in your path were found to be non-existent: {PosixPath('//license-pai.cn-shanghai.data.aliyun.com'), PosixPath('http')}
The following directories listed in your path were found to be non-existent: {PosixPath('dsw-registry-vpc.cn-shanghai.cr.aliyuncs.com/cloud-dsw/eas-service'), PosixPath('aigc-torch113-cu117-ubuntu22.04-v0.2.1')}
The following directories listed in your path were found to be non-existent: {PosixPath('http'), PosixPath('8088/dsw-301739'), PosixPath('//127.0.0.1')}
The following directories listed in your path were found to be non-existent: {PosixPath('Asia/Shanghai')}
The following directories listed in your path were found to be non-existent: {PosixPath('tcp'), PosixPath('443'), PosixPath('//10.192.0.1')}
The following directories listed in your path were found to be non-existent: {PosixPath('https'), PosixPath('//dsw-cn-shanghai.data.aliyun.com')}
The following directories listed in your path were found to be non-existent: {PosixPath('tcp'), PosixPath('443'), PosixPath('//10.192.0.1')}
The following directories listed in your path were found to be non-existent: {PosixPath('/home/pai/bin/python')}
CUDA_SETUP: WARNING! libcudart.so not found in any environmental path. Searching in backup paths...
DEBUG: Possible options found for libcudart.so: {PosixPath('/usr/local/cuda/lib64/libcudart.so.11.0')}
CUDA SETUP: PyTorch settings found: CUDA_VERSION=118, Highest Compute Capability: 7.0.
CUDA SETUP: To manually override the PyTorch CUDA version please see:https://github.com/TimDettmers/bitsandbytes/blob/main/how_to_use_nonpytorch_cuda.md
/usr/local/lib/python3.10/dist-packages/bitsandbytes/cuda_setup/main.py:166: UserWarning: WARNING: Compute capability &amp;lt; 7.5 detected! Only slow 8-bit matmul is supported for your GPU! If you run into issues with 8-bit matmul, you can try 4-bit quantization: https://huggingface.co/blog/4bit-transformers-bitsandbytes
warn(msg)
CUDA SETUP: Loading binary /usr/local/lib/python3.10/dist-packages/bitsandbytes/libbitsandbytes_cuda118_nocublaslt.so...
libcusparse.so.11: cannot open shared object file: No such file or directory
CUDA SETUP: Something unexpected happened. Please compile from source:
git clone https://github.com/TimDettmers/bitsandbytes.git
cd bitsandbytes
CUDA_VERSION=118 make cuda11x_nomatmul
python setup.py install
Traceback (most recent call last):
File &amp;quot;/usr/lib/python3.10/runpy.py&amp;quot;, line 187, in _run_module_as_main
mod_name, mod_spec, code = _get_module_details(mod_name, _Error)
File &amp;quot;/usr/lib/python3.10/runpy.py&amp;quot;, line 146, in _get_module_details
return _get_module_details(pkg_main_name, error)
File &amp;quot;/usr/lib/python3.10/runpy.py&amp;quot;, line 110, in _get_module_details
__import__(pkg_name)
File &amp;quot;/usr/local/lib/python3.10/dist-packages/bitsandbytes/__init__.py&amp;quot;, line 6, in &amp;lt;module&amp;gt;
from . import cuda_setup, utils, research
File &amp;quot;/usr/local/lib/python3.10/dist-packages/bitsandbytes/research/__init__.py&amp;quot;, line 1, in &amp;lt;module&amp;gt;
from . import nn
File &amp;quot;/usr/local/lib/python3.10/dist-packages/bitsandbytes/research/nn/__init__.py&amp;quot;, line 1, in &amp;lt;module&amp;gt;
from .modules import LinearFP8Mixed, LinearFP8Global
File &amp;quot;/usr/local/lib/python3.10/dist-packages/bitsandbytes/research/nn/modules.py&amp;quot;, line 8, in &amp;lt;module&amp;gt;
from bitsandbytes.optim import GlobalOptimManager
File &amp;quot;/usr/local/lib/python3.10/dist-packages/bitsandbytes/optim/__init__.py&amp;quot;, line 6, in &amp;lt;module&amp;gt;
from bitsandbytes.cextension import COMPILED_WITH_CUDA
File &amp;quot;/usr/local/lib/python3.10/dist-packages/bitsandbytes/cextension.py&amp;quot;, line 20, in &amp;lt;module&amp;gt;
raise RuntimeError('''
&lt;/code>&lt;/pre>
&lt;p>以及如果遇到类似：&lt;/p>
&lt;pre>&lt;code>Could not load dynamic library 'libcudart.so.11.0'
&lt;/code>&lt;/pre>
&lt;p>重新装适合的CUDA版本即可解决，如果要装CUDA：&lt;/p>
&lt;h2 id="cuda相关">CUDA相关
&lt;/h2>&lt;h3 id="安装cuda指定版本">安装CUDA指定版本
&lt;/h3>&lt;p>遇到过cuda版本不匹配的问题，记一下配置过程
cuda下载：https://developer.nvidia.com/cuda-downloads
但是有时候需要特定版本：https://developer.nvidia.com/cuda-toolkit-archive
以11.8为例，系统是ubuntu22.04，所以这样选：
&lt;img src="https://winotmk.github.io/images/20240111133431.png"
loading="lazy"
>
下载安装cuda：&lt;/p>
&lt;pre>&lt;code>cd /mnt/workspace
wget https://developer.download.nvidia.com/compute/cuda/11.8.0/local_installers/cuda_11.8.0_520.61.05_linux.run
sudo sh cuda_11.8.0_520.61.05_linux.run
&lt;/code>&lt;/pre>
&lt;p>大约3-4GB左右，运行后需要等一会，会弹出交互界面
&lt;img src="https://winotmk.github.io/images/20240111135108.png"
loading="lazy"
>
这里去掉安装驱动，因为我们已经有驱动了只是想要不同版本的cuda，然后选安装&lt;/p>
&lt;p>ps如果遇到装了多份驱动需要卸一个的情况：
&lt;a class="link" href="https://www.jianshu.com/p/54928967e417" target="_blank" rel="noopener"
>https://www.jianshu.com/p/54928967e417&lt;/a>&lt;/p>
&lt;p>装好以后他会提示：
&lt;img src="https://winotmk.github.io/images/20240111135653.png"
loading="lazy"
>
需要往 &lt;code>LD_LIBRARY_PATH&lt;/code> 和 &lt;code>PATH&lt;/code> 里添加两条环境变量&lt;/p>
&lt;pre>&lt;code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-11.8/lib64
export PATH=$PATH:/usr/local/cuda-11.8/bin
&lt;/code>&lt;/pre>
&lt;p>之后我使用&lt;/p>
&lt;pre>&lt;code>python -m bitsandbytes
&lt;/code>&lt;/pre>
&lt;p>如果没有报错应该就是好用的&lt;/p>
&lt;p>ps如果是windows上的wsl：&lt;/p>
&lt;pre>&lt;code>export LD_LIBRARY_PATH=/usr/lib/wsl/lib/
&lt;/code>&lt;/pre>
&lt;h3 id="切换cuda版本">切换cuda版本
&lt;/h3>&lt;pre>&lt;code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-11.7
export BNB_CUDA_VERSION=117
&lt;/code>&lt;/pre>
&lt;p>改环境变量可以手动切换版本（当然得已经装了)&lt;/p>
&lt;h3 id="查看cuda版本">查看cuda版本
&lt;/h3>&lt;pre>&lt;code>nvidia-smi
&lt;/code>&lt;/pre>
&lt;p>或者可以：
参考：https://blog.csdn.net/Kefenggewu_/article/details/117675079
默认cuda会装在&lt;code>/usr/local&lt;/code>,所以查看安装版本可以这样：&lt;/p>
&lt;pre>&lt;code>ls -l /usr/local | grep cuda
&lt;/code>&lt;/pre>
&lt;p>或者据说可以&lt;code>nvcc -V # (V大写)&lt;/code>&lt;/p>
&lt;p>本节另外的参考：https://github.com/TimDettmers/bitsandbytes/blob/main/how_to_use_nonpytorch_cuda.md&lt;/p>
&lt;h2 id="链接">链接
&lt;/h2>&lt;p>kohya_ss:
&lt;a class="link" href="https://github.com/bmaltais/kohya_ss" target="_blank" rel="noopener"
>https://github.com/bmaltais/kohya_ss&lt;/a>
一个封装好的kohya-docker的镜像
&lt;a class="link" href="https://github.com/ashleykleynhans/kohya-docker" target="_blank" rel="noopener"
>https://github.com/ashleykleynhans/kohya-docker&lt;/a>&lt;/p>
&lt;p>dreambooth相关介绍：
&lt;a class="link" href="https://huggingface.co/docs/diffusers/training/dreambooth" target="_blank" rel="noopener"
>https://huggingface.co/docs/diffusers/training/dreambooth&lt;/a>
&lt;a class="link" href="https://github.com/google/dreambooth" target="_blank" rel="noopener"
>https://github.com/google/dreambooth&lt;/a>&lt;/p></description></item><item><title>Linux上的命令行代理工具</title><link>https://winotmk.github.io/posts/240109_linux%E4%B8%8A%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7/</link><pubDate>Tue, 09 Jan 2024 00:00:00 +0000</pubDate><guid>https://winotmk.github.io/posts/240109_linux%E4%B8%8A%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7/</guid><description>&lt;p>&lt;img src="https://winotmk.github.io/images/20240109144331.png"
loading="lazy"
>&lt;/p>
&lt;p>阿里云的AI白票试用还是很香的，b站顺便一搜有很多教程，跑个lora训练或者SD webui之类的
但难免会遇到要拉更新之类的情况，github和huggingface.co速度慢或者连不上去也经常遇到，除了使用镜像站以外，还有可以使用代理来加速&lt;/p>
&lt;h2 id="先通socks5">先通SOCKS5！
&lt;/h2>&lt;h3 id="安装ss">安装ss
&lt;/h3>&lt;p>先贴上需要用到的软件github：
&lt;a class="link" href="https://github.com/shadowsocks/shadowsocks-libev" target="_blank" rel="noopener"
>https://github.com/shadowsocks/shadowsocks-libev&lt;/a>&lt;/p>
&lt;p>以及大概解释了什么是ss2，ss-go，ss-libev
&lt;a class="link" href="https://shadowsocks5.github.io/en/spec/Implementations.html" target="_blank" rel="noopener"
>https://shadowsocks5.github.io/en/spec/Implementations.html&lt;/a>&lt;/p>
&lt;p>在云端实例命令行下，需要个尽可能简洁小巧又好用的工具，ss-libev可能会是我们的首选，ss-libev是一个轻量级安全 SOCKS5 代理，适用于嵌入式设备和低端设备，用纯 C 编写，体积小巧比较高效
我的云计算镜像是基于ubuntu22.04的
要安装它，直接&lt;/p>
&lt;pre>&lt;code>sudo apt update
sudo apt install shadowsocks-libev
&lt;/code>&lt;/pre>
&lt;h3 id="配置ss">配置ss
&lt;/h3>&lt;p>然后编辑设置：&lt;/p>
&lt;pre>&lt;code># Edit the configuration file
sudo vim /etc/shadowsocks-libev/config.json
&lt;/code>&lt;/pre>
&lt;!-- more -->
&lt;p>在&lt;code>config.json&lt;/code>里&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;server&amp;quot;:&amp;quot;my_server_ip&amp;quot;,
&amp;quot;mode&amp;quot;:&amp;quot;tcp_and_udp&amp;quot;,
&amp;quot;server_port&amp;quot;:8388,
&amp;quot;local_port&amp;quot;:1080,
&amp;quot;password&amp;quot;:&amp;quot;barfoo!&amp;quot;,
&amp;quot;timeout&amp;quot;:600,
&amp;quot;method&amp;quot;:&amp;quot;chacha20-ietf-poly1305&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>&lt;code>server&lt;/code> :您的主机名或服务器 IP (IPv4/IPv6)&lt;/li>
&lt;li>&lt;code>mode&lt;/code> :模式一般不动&lt;/li>
&lt;li>&lt;code>server_port&lt;/code> :服务器端口号&lt;/li>
&lt;li>&lt;code>local_port&lt;/code> :本地端口号，一般默认就1080&lt;/li>
&lt;li>&lt;code>password&lt;/code> :密码&lt;/li>
&lt;li>&lt;code>timeout&lt;/code> :连接超时（以秒为单位）&lt;/li>
&lt;li>&lt;code>method&lt;/code> :加密算法&lt;/li>
&lt;/ul>
&lt;p>这些信息只要你找的代理供应商支持ss协议应该都可以拿到&lt;/p>
&lt;p>ps顺便给同学们复习下vim，懒得用vim的可以不看，按&lt;code>a&lt;/code>进入编辑模式，方向键移动光标，编辑完成后按两下 &lt;code>ctrl+c&lt;/code> 进入指令模式然后&lt;code>:wq!&lt;/code>保存更改并退出,如果直接退出不保存是&lt;code>:q!&lt;/code>&lt;/p>
&lt;h3 id="启动ss客户端">启动ss客户端
&lt;/h3>&lt;p>任意目录输入&lt;/p>
&lt;pre>&lt;code>ss-local
&lt;/code>&lt;/pre>
&lt;p>即可做为客户端启动
这里我启动成功以后显示：
&lt;img src="https://winotmk.github.io/images/20240109150557.png"
loading="lazy"
>&lt;/p>
&lt;p>ps这个软件可以以服务端启动，同样也是修改上面的&lt;code>etc/shadowsocks-libev/config.json&lt;/code>,这里挺容易混淆啊，我这里的目标是想给我的云上GPU计算实例代理加速，所以以客户端启动就行
如果要以服务端启动&lt;/p>
&lt;pre>&lt;code>systemctl start shadowsocks-libev.service
&lt;/code>&lt;/pre>
&lt;p>systemctl如果云上镜像里没有（大概率没有，容器镜像谁会带systemctl或者systemd呢~），可以尝试&lt;/p>
&lt;pre>&lt;code>sudo /etc/init.d/shadowsocks-libev start
&lt;/code>&lt;/pre>
&lt;h2 id="安装proxychains使软件走代理">安装proxychains使软件走代理
&lt;/h2>&lt;p>上面只做到了客户端使用SOCKS5打通代理，接下来再用另外一个软件使我们指定的命令/app走这条SOCKS5线路，也就是需要个SOCKS5转HTTP的工具来为我们所用
这里发现了proxychains&lt;/p>
&lt;blockquote>
&lt;p>ProxyChains 是一个强制应用的 TCP 连接通过代理的工具，支持 Tor、HTTP、与 Socks 代理。ProxyChains 只会将当前应用的 TCP 连接转发至代理，而非全局代理。&lt;/p>&lt;/blockquote>
&lt;h3 id="安装proxychains">安装proxychains
&lt;/h3>&lt;pre>&lt;code>sudo apt install proxychains
&lt;/code>&lt;/pre>
&lt;p>超快就安装好了&lt;/p>
&lt;h3 id="配置">配置
&lt;/h3>&lt;pre>&lt;code> vim /etc/proxychains.conf
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>[ProxyList]
# add proxy here ...
# meanwile
# defaults set to &amp;quot;tor&amp;quot;
#socks4 127.0.0.1 9050
# example
socks5 127.0.0.1 1080
&lt;/code>&lt;/pre>
&lt;h3 id="使用">使用
&lt;/h3>&lt;p>ProxyChains 的使用方式非常简单，直接在应用程序前加上 proxychains 即可
例如：&lt;/p>
&lt;pre>&lt;code>proxychains git clone https://github.com/rofl0r/proxychains-ng
&lt;/code>&lt;/pre>
&lt;p>但是据说ping是不行的，因为pin并不是TCP而是ICMP，所以可以尝试&lt;code>proxychains ping google.com&lt;/code>,总之我是能解析出IP但是会卡住ping不了，问题不大&lt;/p>
&lt;p>试试看是不是通了：
先试试&lt;/p>
&lt;pre>&lt;code>curl cip.cc
&lt;/code>&lt;/pre>
&lt;p>得到
&lt;img src="https://winotmk.github.io/images/20240109152134.png"
loading="lazy"
>&lt;/p>
&lt;p>我们加上proxychains以后&lt;/p>
&lt;pre>&lt;code>proxychains curl cip.cc
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://winotmk.github.io/images/20240109152400.png"
loading="lazy"
>&lt;/p>
&lt;p>看！效果立竿见影，而且可以灵活使用&lt;/p>
&lt;p>另外一种方法或许可以不装proxychains
直接设置变量&lt;/p>
&lt;pre>&lt;code>export http_proxy=&amp;quot;socks5://127.0.0.1:1080&amp;quot;
export https_proxy=&amp;quot;socks5://127.0.0.1:1080&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>可能也可以但没试过&lt;/p>
&lt;h2 id="其他一些镜像方案">其他一些镜像方案：
&lt;/h2>&lt;h3 id="huggingface">huggingface
&lt;/h3>&lt;p>运行python时前加&lt;code>HF_ENDPOINT=https://hf-mirror.com&lt;/code>，这样就可以实现后续走镜像加速了&lt;/p>
&lt;pre>&lt;code>HF_ENDPOINT=https://hf-mirror.com python your_script.py
&lt;/code>&lt;/pre>
&lt;p>详细用法：
&lt;a class="link" href="https://hf-mirror.com/" target="_blank" rel="noopener"
>https://hf-mirror.com/&lt;/a>&lt;/p>
&lt;h3 id="github">github
&lt;/h3>&lt;p>示例用法，直接github域名前加&lt;code>https://mirror.ghproxy.com/&lt;/code>&lt;/p>
&lt;pre>&lt;code>https://mirror.ghproxy.com/https://github.com/d8ahazard/sd_dreambooth_extension
&lt;/code>&lt;/pre>
&lt;p>详细见：
&lt;a class="link" href="https://mirror.ghproxy.com/" target="_blank" rel="noopener"
>https://mirror.ghproxy.com/&lt;/a>
有些部署文件里还是用的之前的域名&lt;code>https://ghproxy.com/&lt;/code>,已失效，改用二级域名&lt;code>https://mirror.ghproxy.com/&lt;/code>即可&lt;/p>
&lt;h2 id="附录">附录
&lt;/h2>&lt;h3 id="本文参考文章">本文参考文章
&lt;/h3>&lt;p>linux命令行代理神器-proxychains
&lt;a class="link" href="https://zhuanlan.zhihu.com/p/166375631" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/166375631&lt;/a>&lt;/p>
&lt;p>Linux 让终端走代理的几种方法
&lt;a class="link" href="https://zhuanlan.zhihu.com/p/46973701" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/46973701&lt;/a>&lt;/p>
&lt;p>ss服务端和客户端安装
&lt;a class="link" href="https://mkmerich.com/2018-09-23/shadowsocks%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E8%A3%85.html" target="_blank" rel="noopener"
>https://mkmerich.com/2018-09-23/shadowsocks%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E8%A3%85.html&lt;/a>&lt;/p>
&lt;p>基本概念,什么是ss什么是socks5
&lt;a class="link" href="https://reezon.github.io/2018/05/23/%E5%85%B3%E4%BA%8Ess%28%E9%85%B8%E9%85%B8%29%E5%92%8Cssr%28%E9%85%B8%E9%85%B8%E4%B9%B3%29%EF%BC%8C%E8%BF%98%E6%9C%89vpn%E5%92%8Csocks5/" target="_blank" rel="noopener"
>https://reezon.github.io/2018/05/23/%E5%85%B3%E4%BA%8Ess(%E9%85%B8%E9%85%B8)%E5%92%8Cssr(%E9%85%B8%E9%85%B8%E4%B9%B3)%EF%BC%8C%E8%BF%98%E6%9C%89vpn%E5%92%8Csocks5/&lt;/a>&lt;/p>
&lt;p>使用Curl时可以直接用socks5
&lt;a class="link" href="https://blog.emacsos.com/use-socks5-proxy-in-curl.html" target="_blank" rel="noopener"
>https://blog.emacsos.com/use-socks5-proxy-in-curl.html&lt;/a>&lt;/p>
&lt;h3 id="其他类似方案软件">其他类似方案软件
&lt;/h3>&lt;p>sshuttle
&lt;a class="link" href="https://github.com/sshuttle/sshuttle" target="_blank" rel="noopener"
>https://github.com/sshuttle/sshuttle&lt;/a>&lt;/p>
&lt;p>yuhaiin
&lt;a class="link" href="https://github.com/yuhaiin/yuhaiin" target="_blank" rel="noopener"
>https://github.com/yuhaiin/yuhaiin&lt;/a>&lt;/p>
&lt;p>clash-verge
&lt;a class="link" href="https://github.com/zzzgydi/clash-verge" target="_blank" rel="noopener"
>https://github.com/zzzgydi/clash-verge&lt;/a>&lt;/p></description></item><item><title>ArchLinux命令集</title><link>https://winotmk.github.io/posts/archlinux%E5%91%BD%E4%BB%A4/</link><pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate><guid>https://winotmk.github.io/posts/archlinux%E5%91%BD%E4%BB%A4/</guid><description>&lt;p>刚装完archlinux后ifconfig无法使用?&lt;/p>
&lt;pre>&lt;code class="language-console"># pacman -S net-tools dnsutils inetutils iproute2
&lt;/code>&lt;/pre>
&lt;h3 id="archlinux开启ssh服务命令">Archlinux开启ssh服务命令：
&lt;/h3>&lt;pre>&lt;code class="language-console"># systemctl enable sshd.service 开机启动
# systemctl start sshd.service 立即启动
# systemctl restart sshd.service 立即重启
&lt;/code>&lt;/pre>
&lt;h3 id="关于systemctl">关于systemctl:
&lt;/h3>&lt;p>&lt;a class="link" href="https://wiki.archlinux.org/title/Systemd_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29" target="_blank" rel="noopener"
>https://wiki.archlinux.org/title/Systemd_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)&lt;/a>&lt;/p>
&lt;p>比如：关闭开机启用KDE桌面环境&lt;/p>
&lt;pre>&lt;code class="language-console"># systemctl disable sddm
&lt;/code>&lt;/pre>
&lt;h3 id="切换到root用户">切换到root用户：
&lt;/h3>&lt;pre>&lt;code class="language-shell"># su
&lt;/code>&lt;/pre>
&lt;!-- more -->
&lt;hr>
&lt;p>以下无用，应该是旧版本PuTTY密钥算法支持有限，请更新PuTTY。。&lt;/p>
&lt;p>用PuTTY登录报错：&lt;/p>
&lt;p>couldn&amp;rsquo;t agree a host key algorithm&lt;/p>
&lt;p>解决，生成密钥：（出处：&lt;a class="link" href="https://forums.centos.org/viewtopic.php?t=52892" target="_blank" rel="noopener"
>https://forums.centos.org/viewtopic.php?t=52892&lt;/a>&lt;/p>
&lt;pre>&lt;code class="language-shell"># cd /etc/ssh
# ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key
# vi /etc/ssh/sshd_config
Uncomment this line:
# HostKey /etc/ssh/ssh_host_dsa_key
# chgrp ssh_keys ssh_host_dsa_key
# service sshd restart
&lt;/code>&lt;/pre>
&lt;p>如果putty连接报Network error:connection refused
关闭防火墙&lt;/p>
&lt;pre>&lt;code class="language-shell"># systemctl start iptables
&lt;/code>&lt;/pre>
&lt;hr>
&lt;h3 id="安装jre环境">安装jre环境
&lt;/h3>&lt;pre>&lt;code class="language-shell"># pacman -S jre8-openjdk
&lt;/code>&lt;/pre>
&lt;p>高版本mc需要高JDK&lt;/p>
&lt;pre>&lt;code class="language-shell"># pacman -S jre17-openjdk
&lt;/code>&lt;/pre>
&lt;p>切换java版本&lt;/p>
&lt;pre>&lt;code class="language-shell"># sudo archlinux-java set java-17-openjdk
&lt;/code>&lt;/pre>
&lt;p>查看java状态&lt;/p>
&lt;pre>&lt;code class="language-shell"># java -version
&lt;/code>&lt;/pre>
&lt;h3 id="启动一个mc服务器">启动一个mc服务器
&lt;/h3>&lt;p>&lt;a class="link" href="https://cloud.tencent.com/developer/article/1622545" target="_blank" rel="noopener"
>https://cloud.tencent.com/developer/article/1622545&lt;/a>&lt;/p>
&lt;pre>&lt;code class="language-shell"># java -Xms1024MB -Xmx2048MB -jar iserver.jar
&lt;/code>&lt;/pre>
&lt;h3 id="设置中文环境">设置中文环境
&lt;/h3>&lt;pre>&lt;code class="language-shell"># vim /etc/locale.conf
&lt;/code>&lt;/pre>
&lt;p>增加以下内容
LANG=zh_CN.UTF-8&lt;/p>
&lt;p>下次重新登录就是中文啦。可以输入date查看日期，如果显示中文，就说明设置正常啦&lt;/p>
&lt;h3 id="关于linux任务前后台处理">关于linux任务前后台处理：
&lt;/h3>&lt;p>&lt;a class="link" href="https://blog.csdn.net/timonium/article/details/116245621" target="_blank" rel="noopener"
>https://blog.csdn.net/timonium/article/details/116245621&lt;/a>
&lt;a class="link" href="https://www.cnblogs.com/xiaoleiel/p/8349675.html" target="_blank" rel="noopener"
>https://www.cnblogs.com/xiaoleiel/p/8349675.html&lt;/a>&lt;/p>
&lt;p>正在前台运行的命令暂停且放到后台：&lt;/p>
&lt;pre>&lt;code class="language-shell"># Ctrl+z
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-shell"># jobs ## 查看后台进程编号
# jobs -l ##查看进程PID，可以配合kill干掉进程
&lt;/code>&lt;/pre>
&lt;p>bg在后台继续执行，fg调回前台执行&lt;/p>
&lt;pre>&lt;code class="language-shell"># bg [作业编号]
# fg [作业编号]
&lt;/code>&lt;/pre>
&lt;p>一开始就后台执行：
&lt;a class="link" href="https://www.cnblogs.com/linnuo/p/9084125.html" target="_blank" rel="noopener"
>https://www.cnblogs.com/linnuo/p/9084125.html&lt;/a>&lt;/p>
&lt;pre>&lt;code class="language-shell"># java -jar shareniu.jar &amp;amp;
&lt;/code>&lt;/pre>
&lt;p>&amp;amp;代表在后台运行&lt;/p>
&lt;pre>&lt;code class="language-shell"># nohup java -jar shareniu.jar &amp;amp;
&lt;/code>&lt;/pre>
&lt;p>nohup 意思是不挂断运行命令,当账户退出或终端关闭时,程序仍然运行
当用 nohup 命令执行作业时，缺省情况下该作业的所有输出被重定向到nohup.out的文件中，除非另外指定了输出文件。&lt;/p>
&lt;p>ps：我觉得上面的后台操作不好用不如试试Screen&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/han0373/article/details/81352663" target="_blank" rel="noopener"
>https://blog.csdn.net/han0373/article/details/81352663&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>screen -S yourname -&amp;gt; 新建一个叫yourname的session
screen -ls -&amp;gt; 列出当前所有的session
screen -r yourname -&amp;gt; 回到yourname这个session
screen -d yourname -&amp;gt; 远程detach某个session
screen -d -r yourname -&amp;gt; 结束当前session并回到yourname这个session&lt;/p>&lt;/blockquote>
&lt;p>回到MCSManager的面板&lt;/p>
&lt;pre>&lt;code># screen -r mcsm
&lt;/code>&lt;/pre>
&lt;h3 id="看进程">看进程
&lt;/h3>&lt;pre>&lt;code class="language-shell"># ps aux
或者
# top
&lt;/code>&lt;/pre>
&lt;h3 id="压缩">压缩
&lt;/h3>&lt;p>&lt;a class="link" href="https://www.jianshu.com/p/59d93f942506" target="_blank" rel="noopener"
>https://www.jianshu.com/p/59d93f942506&lt;/a>&lt;/p>
&lt;pre>&lt;code>01-.tar格式
解包：# tar xvf FileName.tar
打包：# tar cvf FileName.tar DirName（注：tar是打包，不是压缩！）
02-.gz格式
解压1：# gunzip FileName.gz
解压2：# gzip -d FileName.gz
压 缩：# gzip FileName
03-.tar.gz格式
解压：# tar zxvf FileName.tar.gz
压缩：# tar zcvf FileName.tar.gz DirName
&lt;/code>&lt;/pre></description></item><item><title>linux文件和目录权限</title><link>https://winotmk.github.io/posts/linux%E6%9D%83%E9%99%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://winotmk.github.io/posts/linux%E6%9D%83%E9%99%90/</guid><description>&lt;p>*本文摘录整理为主&lt;/p>
&lt;p>用&lt;code>ls -l&lt;/code>查看权限：&lt;/p>
&lt;pre>&lt;code>文件属性 文件数 拥有者 所属的group 文件大小 建档日期 文件名　　
drwx--x--x 1 root wheel 6872 2 7 22:41 compressedPackage/
drwxr-xr-x 1 liuml wheel 8620 2 15 09:32 wwwroot/　　
lrwxrwxrwx 1 liuml wheel 46 2 24 19:30 abc@ -&amp;gt; home/abc
-rwxr-xr-x 1 liuml wheel 68568 2 29 07:43 test*　　
- 文件名栏位 文件后面的符号含义
- / ：表明是一个目录
- @ ：表明是到其它文件的符号链接
- * ：表明是一个可执行文件。
- 对于权限设置的解释
- r 是读，w 是写，x 是执行
- 对应数字如下:
- r = 4 w = 2 x = 1
- rwx ：4+2+1 = 7
- rw- ：4+2 = 6
- r-x ：4+1 = 5
- drwxr-xr-x ：755
- 第 0-1位 文件类型
- “-” ：表示普通文件；
- “d” ：表示目录；
- “l” ：表示链接文件；
- “p” ：表示管理文件；
- “b” ：表示块设备文件；
- “c” ：表示字符设备文件；
- “s” ：表示套接字文件；
- 第 2-4位 文件所有者权限 [User]
- 第 5-7位 文件所有者所在组权限 [Group]
- 第 8-10位 其他用户权限 [Others]
- 没有的权限用 “-” 来表示
————————————————
版权声明：本文为CSDN博主「烟雨弥漫了江南」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/u010324331/article/details/88035175/
&lt;/code>&lt;/pre>
&lt;!-- more -->
&lt;p>{% asset_img 20211012_231624_2018091016360849.png 800 %}&lt;/p>
&lt;p>图片来源：&lt;a class="link" href="https://blog.csdn.net/zhuoya_/article/details/77418413" target="_blank" rel="noopener"
>https://blog.csdn.net/zhuoya_/article/details/77418413&lt;/a>&lt;/p>
&lt;p>共显示了七列信息，从左至右依次为：权限、文件数、归属用户、归属群组、文件大小、创建日期、文件名称
d ：第一位表示文件类型&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">第一位字符&lt;/th>
&lt;th>文件类型&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">d&lt;/td>
&lt;td>文件夹&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">-&lt;/td>
&lt;td>普通文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">l&lt;/td>
&lt;td>链接&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">b&lt;/td>
&lt;td>块设备文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">p&lt;/td>
&lt;td>管道文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">c&lt;/td>
&lt;td>字符设备文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">s&lt;/td>
&lt;td>套接口文件&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>rxw和数值权限的对应：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>rxw&lt;/th>
&lt;th>数值&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>r(读)&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>w(写)&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>x(执行)&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>所以，例如：
rwx rw- r&amp;ndash;
7 6 4
三个一组,rwx权限分别对应421相加得7,rw-对应42相加,r&amp;ndash;对应4&lt;/p>
&lt;p>{% asset_img 20211012_232003_20180910175047158.gif 500 %}&lt;/p>
&lt;p>图片来源：&lt;a class="link" href="http://man.linuxde.net/chmod" target="_blank" rel="noopener"
>http://man.linuxde.net/chmod&lt;/a>&lt;/p>
&lt;p>举例：-rw-r&amp;ndash;r&amp;ndash;，即为644权限
6对应4+2 rw-
4对应 r&amp;ndash;
那么这个文件的权限就是所有者rw-,所属组r&amp;ndash;,其他人r&amp;ndash;&lt;/p>
&lt;p>常用的linux权限对应：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>数值&lt;/th>
&lt;th>rxw&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>444&lt;/td>
&lt;td>r&amp;ndash;r&amp;ndash;r&amp;ndash;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>600&lt;/td>
&lt;td>rw&amp;mdash;&amp;mdash;-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>644&lt;/td>
&lt;td>rw-r&amp;ndash;r&amp;ndash;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>666&lt;/td>
&lt;td>rw-rw-rw-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>700&lt;/td>
&lt;td>rwx&amp;mdash;&amp;mdash;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>744&lt;/td>
&lt;td>rwxr&amp;ndash;r&amp;ndash;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>755&lt;/td>
&lt;td>rwxr-xr-x&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>777&lt;/td>
&lt;td>rwxrwxrwx&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="命令修改权限">命令修改权限
&lt;/h2>&lt;ol>
&lt;li>&lt;strong>权限管理命令chmod&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>修改文件或者目录的权限
全拼: change permissions mode of a file
语法:&lt;/p>
&lt;pre>&lt;code>chmod [{ugoa}{+-=}{rwx}] [文件或目录]
[mode=421] [文件或目录]
-R 递归修改
u:所有者, g:所属组,o:其他人,a:所有;
+:添加权限,-减少权限,=直接赋值成这个权限
&lt;/code>&lt;/pre>
&lt;ol start="2">
&lt;li>&lt;strong>创建目录mkdir时加权限&lt;/strong>&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>$ mkdir -m=r-- letter
&lt;/code>&lt;/pre>
&lt;p>上面的命令会创建一个名为 letter 的目录，同时为&lt;strong>目录所有者、用户组和其他用户&lt;/strong> 针对该目录赋予&lt;strong>只读权限&lt;/strong>&lt;/p>
&lt;p>mkdir命令小参考：&lt;a class="link" href="https://linux.cn/article-2713-1.html" target="_blank" rel="noopener"
>在 Linux 下用 mkdir 命令来创建目录和子目录&lt;/a>&lt;/p>
&lt;h2 id="参考">参考：
&lt;/h2>&lt;p>&lt;a class="link" href="https://www.cnblogs.com/tianchao/p/11821556.html" target="_blank" rel="noopener"
>linux权限drwxrwxrwx所代表的意义&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/u010324331/article/details/88035175/" target="_blank" rel="noopener"
>linux ls -l命令显示详解&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/ken1583096683/article/details/82594037" target="_blank" rel="noopener"
>linux更改文件(夹)权限或所有者&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://jingyan.baidu.com/article/4853e1e5413b541909f72632.html" target="_blank" rel="noopener"
>Linux 文件权限查看及修改&lt;/a>&lt;/p></description></item><item><title>安装ArchLinux系统（详细过程）</title><link>https://winotmk.github.io/posts/%E5%AE%89%E8%A3%85arch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://winotmk.github.io/posts/%E5%AE%89%E8%A3%85arch/</guid><description>&lt;p>参考文章：&lt;a class="link" href="https://zhuanlan.zhihu.com/p/138951848" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/138951848&lt;/a>&lt;/p>
&lt;p>官方WIKI安装指南（上文和本文大致流程基于此）：&lt;a class="link" href="https://wiki.archlinux.org/title/Installation_guide" target="_blank" rel="noopener"
>https://wiki.archlinux.org/title/Installation_guide&lt;/a>&lt;/p>
&lt;p>家里旧笔记本淘汰装个Linux跑跑服务发挥余热，
这里是彻底格式化硬盘新安装，而不需要多系统引导&lt;/p>
&lt;p>我的环境有：&lt;/p>
&lt;ul>
&lt;li>2核 Intel(R) Pentium(R) CPU 997 @ 1.60GHz&lt;/li>
&lt;li>4GB 1600内存&lt;/li>
&lt;li>UEFI启动（不能为BIOS）&lt;/li>
&lt;li>Samsang 850 EVO 250G 2.5寸SATA接口&lt;/li>
&lt;li>无线网卡拆掉了，用得是网线&lt;/li>
&lt;li>路由器上全局梯子（所以我没有换源，用官方源速度足够了）&lt;/li>
&lt;/ul>
&lt;h2 id="准备镜像">准备镜像
&lt;/h2>&lt;p>&lt;a class="link" href="https://archlinux.org/download/" target="_blank" rel="noopener"
>https://archlinux.org/download/&lt;/a>
下载发行版的Linux的ISO
然后制作U盘启动，我是在mac下用balenaEtcher做的，操作非常方便&lt;/p>
&lt;p>{% asset_img 20211024_224012.png 800 %}&lt;/p>
&lt;!-- more -->
&lt;p>然后重启电脑从U盘启动&lt;/p>
&lt;h2 id="硬盘准备">硬盘准备
&lt;/h2>&lt;p>进入U盘系统后先连pacman试试&lt;/p>
&lt;pre>&lt;code class="language-Shell">pacman -Syyy
&lt;/code>&lt;/pre>
&lt;p>{% asset_img 20211024_224554_v2-da5d5bc2996a7b6990673c4c4700d77a_1440w.png 800 %}&lt;/p>
&lt;h3 id="检查硬盘">检查硬盘
&lt;/h3>&lt;pre>&lt;code class="language-Shell">lsblk
&lt;/code>&lt;/pre>
&lt;p>{% asset_img 20211024_231805.png 500 %}&lt;/p>
&lt;h3 id="建立分区">建立分区
&lt;/h3>&lt;pre>&lt;code class="language-Shell">cfdisk /dev/sda
&lt;/code>&lt;/pre>
&lt;p>选择New 回车，然后
选择Write 回车 输入 yes 回车
写入完成 选择Quit 回车退出&lt;/p>
&lt;h3 id="格式化">格式化
&lt;/h3>&lt;p>将刚刚分好的区格式化为ext4格式，这里认准分区号sda1&lt;/p>
&lt;pre>&lt;code class="language-Shell">mkfs.ext4 /dev/sda1
&lt;/code>&lt;/pre>
&lt;h3 id="挂载分区">挂载分区
&lt;/h3>&lt;p>sda1&lt;/p>
&lt;pre>&lt;code class="language-Shell">mount /dev/sda1 /mnt
&lt;/code>&lt;/pre>
&lt;h2 id="安装系统">安装系统
&lt;/h2>&lt;pre>&lt;code class="language-Shell">pacstrap /mnt base linux linux-firmware nano
&lt;/code>&lt;/pre>
&lt;h2 id="生成fstab文件">生成fstab文件
&lt;/h2>&lt;pre>&lt;code class="language-Shell">genfstab -U /mnt &amp;gt;&amp;gt; /mnt/etc/fstab
&lt;/code>&lt;/pre>
&lt;p>检查生成的fstab文件&lt;/p>
&lt;pre>&lt;code class="language-Shell">cat /mnt/etc/fstab
&lt;/code>&lt;/pre>
&lt;h2 id="配置新系统">配置新系统
&lt;/h2>&lt;h3 id="切换到装好的系统">切换到装好的系统
&lt;/h3>&lt;pre>&lt;code class="language-Shell">arch-chroot /mnt
&lt;/code>&lt;/pre>
&lt;h3 id="设置时区">设置时区
&lt;/h3>&lt;pre>&lt;code class="language-Shell">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
&lt;/code>&lt;/pre>
&lt;h3 id="设置locale">设置locale
&lt;/h3>&lt;pre>&lt;code class="language-Shell">nano /etc/locale.gen
&lt;/code>&lt;/pre>
&lt;p>Ctrl+W 输入 #en_US 回车 找到UTF-8那一行 删掉前面的#&lt;/p>
&lt;p>Ctrl+W 输入 #zh_CN 回车 找到UTF-8那一行 删掉前面的#
Ctrl+X 然后Y保存退出
生成locale&lt;/p>
&lt;pre>&lt;code class="language-Shell">locale-gen
&lt;/code>&lt;/pre>
&lt;p>创建并写入/etc/locale.conf文件&lt;/p>
&lt;pre>&lt;code class="language-Shell">nano /etc/locale.conf
&lt;/code>&lt;/pre>
&lt;p>填入内容，注意这里只能填这个&lt;/p>
&lt;pre>&lt;code class="language-Shell">LANG=en_US.UTF-8
&lt;/code>&lt;/pre>
&lt;h3 id="创建并写入hostname">创建并写入hostname
&lt;/h3>&lt;pre>&lt;code class="language-Shell">nano /etc/hostname
&lt;/code>&lt;/pre>
&lt;p>我这里名字叫WinArch
保存退出&lt;/p>
&lt;h3 id="修改hosts">修改hosts
&lt;/h3>&lt;pre>&lt;code class="language-Shell">nano /etc/hosts
&lt;/code>&lt;/pre>
&lt;p>写入内容如图（中间的空白用tab而非空格），arch替换为你之前在hostname里写入的内容，其他都按照图里面的写（注意最后一行的ip是127.0.1.1）&lt;/p>
&lt;p>{% asset_img 20211024_234039_v2-54fc38004dc15b76d68983a78e59928a_r.jpg 800 %}&lt;/p>
&lt;p>保存退出&lt;/p>
&lt;p>建议上述编辑的内容都用cat输出检查一下&lt;/p>
&lt;h3 id="root用户创建密码">root用户创建密码
&lt;/h3>&lt;pre>&lt;code class="language-Shell">passwd
&lt;/code>&lt;/pre>
&lt;p>然后输入并确认密码&lt;/p>
&lt;h3 id="装启动器和一些软件">装启动器和一些软件
&lt;/h3>&lt;p>包含了一些常用到的软件&lt;/p>
&lt;pre>&lt;code class="language-Shell">pacman -S grub efibootmgr networkmanager network-manager-applet dialog wireless_tools wpa_supplicant os-prober mtools dosfstools ntfs-3g base-devel linux-headers reflector git sudo
&lt;/code>&lt;/pre>
&lt;p>intel的cpu，需要安装intel的微码文件&lt;/p>
&lt;pre>&lt;code class="language-Shell">pacman -S intel-ucode
&lt;/code>&lt;/pre>
&lt;p>完成之后输入&lt;/p>
&lt;pre>&lt;code class="language-Shell">grub-install /dev/sda
&lt;/code>&lt;/pre>
&lt;p>注意是硬盘位置不是分区位置，硬盘上也只有刚刚安装的Arch系统&lt;/p>
&lt;p>生成grub.cfg&lt;/p>
&lt;pre>&lt;code class="language-Shell">grub-mkconfig -o /boot/grub/grub.cfg
&lt;/code>&lt;/pre>
&lt;p>出现吧啦吧啦done就完成了&lt;/p>
&lt;h2 id="退出新系统重启">退出新系统重启
&lt;/h2>&lt;pre>&lt;code class="language-shell">exit
reboot
&lt;/code>&lt;/pre>
&lt;p>不装桌面环境的话，到这步即可使用了，后续需要什么再装不迟&lt;/p>
&lt;h2 id="新建用户并授权">新建用户并授权
&lt;/h2>&lt;pre>&lt;code class="language-Shell">useradd -m -G wheel winotmk
&lt;/code>&lt;/pre>
&lt;p>我的用户是winotkm，这里主要是创建一个非root的账户，桌面环境一般无法用root登陆的
创建密码&lt;/p>
&lt;pre>&lt;code class="language-Shell">passwd winotmk
&lt;/code>&lt;/pre>
&lt;p>授权&lt;/p>
&lt;pre>&lt;code class="language-Shell">EDITOR=nano visudo
&lt;/code>&lt;/pre>
&lt;p>Ctrl+W 输入 # %wheel 回车 找到这行 删除前面的 #（取消注释）&lt;/p>
&lt;h2 id="安装display-server和display-manager">安装Display Server和Display Manager
&lt;/h2>&lt;pre>&lt;code class="language-Shell">pacman -S xorg
&lt;/code>&lt;/pre>
&lt;p>然后我喜欢KDE桌面，所以装：&lt;/p>
&lt;pre>&lt;code class="language-Shell">pacman -S sddm
&lt;/code>&lt;/pre>
&lt;p>设置开机启动&lt;/p>
&lt;pre>&lt;code class="language-Shell">systemctl enable sddm
&lt;/code>&lt;/pre>
&lt;p>PS.取消开机启动是&lt;/p>
&lt;pre>&lt;code class="language-Shell">systemctl disable sddm
&lt;/code>&lt;/pre>
&lt;h2 id="安装desktop-environment">安装Desktop Environment
&lt;/h2>&lt;p>KDE：&lt;/p>
&lt;pre>&lt;code class="language-Shell">pacman -S plasma kde-applications packagekit-qt5
&lt;/code>&lt;/pre>
&lt;p>安装中文的字体&lt;/p>
&lt;pre>&lt;code class="language-Shell">pacman -S noto-fonts-cjk
&lt;/code>&lt;/pre>
&lt;p>好了，大功告成&lt;/p>
&lt;pre>&lt;code class="language-Shell">reboot
&lt;/code>&lt;/pre>
&lt;p>{% asset_img 20211025_000315_87B60562-6700-4593-B70A-F543B38B30E5_1_105_c.jpeg 800 %}&lt;/p></description></item><item><title>流量异常排查</title><link>https://winotmk.github.io/posts/%E6%B5%81%E9%87%8F%E5%BC%82%E5%B8%B8%E6%8E%92%E6%9F%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://winotmk.github.io/posts/%E6%B5%81%E9%87%8F%E5%BC%82%E5%B8%B8%E6%8E%92%E6%9F%A5/</guid><description>&lt;p>&lt;img src="https://winotmk.github.io/images/20230618000510.png"
loading="lazy"
>
挖个坑。。。&lt;/p></description></item><item><title>生成秘钥连接至github————用来推hexo</title><link>https://winotmk.github.io/posts/%E7%94%9F%E6%88%90%E7%A7%98%E9%92%A5%E8%BF%9E%E6%8E%A5%E8%87%B3github_%E7%94%A8%E6%9D%A5%E6%8E%A8hexo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://winotmk.github.io/posts/%E7%94%9F%E6%88%90%E7%A7%98%E9%92%A5%E8%BF%9E%E6%8E%A5%E8%87%B3github_%E7%94%A8%E6%9D%A5%E6%8E%A8hexo/</guid><description>&lt;h2 id="生成秘钥">生成秘钥
&lt;/h2>&lt;pre>&lt;code>ssh-keygen -t ed25519 -C &amp;quot;550330147@qq.com&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>邮箱自然是我的git注册邮箱&lt;/p>
&lt;h2 id="如果修改passphrade密码">如果修改passphrade密码
&lt;/h2>&lt;pre>&lt;code>ssh-keygen -p -f ~/.ssh/id_ed25519
&lt;/code>&lt;/pre>
&lt;p>直接enter即密码为空，这是秘钥的密码&lt;/p>
&lt;h2 id="复制秘钥到github">复制秘钥到github
&lt;/h2>&lt;p>&lt;img src="https://winotmk.github.io/images/20230618002355.png"
loading="lazy"
>
打开/root/.ssh/id_ed25519.pub
复制到这里
&lt;img src="https://winotmk.github.io/images/20230618002554.png"
loading="lazy"
>
&lt;a class="link" href="https://github.com/settings/ssh/new" target="_blank" rel="noopener"
>https://github.com/settings/ssh/new&lt;/a>&lt;/p>
&lt;p>PS官方已不推荐用rsa加密&lt;/p>
&lt;h2 id="测试">测试
&lt;/h2>&lt;pre>&lt;code>ssh -T git@github.com
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://winotmk.github.io/images/20230618003332.png"
loading="lazy"
>
这里输入yes
&lt;img src="https://winotmk.github.io/images/20230618003428.png"
loading="lazy"
>
成功！&lt;/p></description></item><item><title>树莓派路由器</title><link>https://winotmk.github.io/posts/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%B7%AF%E7%94%B1%E5%99%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://winotmk.github.io/posts/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%B7%AF%E7%94%B1%E5%99%A8/</guid><description>&lt;h2 id="树莓派cm4的">树莓派CM4的
&lt;/h2>&lt;p>&lt;img src="https://winotmk.github.io/images/20230614212800.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="openwrt-web界面安装中文">openWrt web界面安装中文
&lt;/h2>&lt;p>&lt;a class="link" href="https://www.jianshu.com/p/da01ce070688" target="_blank" rel="noopener"
>https://www.jianshu.com/p/da01ce070688&lt;/a>
更新包目录：&lt;/p>
&lt;pre>&lt;code class="language-shell">opkg update
&lt;/code>&lt;/pre>
&lt;p>这里一开始我不行，ping1.1.1.1和ping8.8.8.8都ping不通，然后忽然想起自己的科学梯子路由网关是192.168.50.4
改之!!&lt;/p>
&lt;p>&lt;img src="https://winotmk.github.io/images/20230614001635.png"
loading="lazy"
>&lt;/p>
&lt;p>可能还不行
&lt;img src="https://winotmk.github.io/images/20230617224422.png"
loading="lazy"
>
这俩防火墙设置一下&lt;/p>
&lt;p>如果还不行
&lt;img src="https://winotmk.github.io/images/20230617231305.png"
loading="lazy"
>
DNS记得指定一下&lt;/p>
&lt;p>这下就能通了&lt;/p>
&lt;p>PS也可以点配置opkg，然后加一条&lt;/p>
&lt;pre>&lt;code class="language-shell">src/gz openwrt_packages https://mirrors.ustc.edu.cn/openwrt/releases/22.03.5/packages/aarch64_cortex-a72/packages/
&lt;/code>&lt;/pre>
&lt;p>把源换为国内&lt;/p>
&lt;p>然后&lt;/p>
&lt;pre>&lt;code class="language-shell">opkg install luci-i18n-base-zh-cn
&lt;/code>&lt;/pre>
&lt;p>提示&lt;/p>
&lt;pre>&lt;code class="language-shell">Configuring luci-i18n-base-zh-cn
&lt;/code>&lt;/pre>
&lt;p>再回来看web界面就已经是中文了
&lt;img src="https://winotmk.github.io/images/20230614001825.png"
loading="lazy"
>&lt;/p>
&lt;!-- more -->
&lt;h2 id="如果要开启sftp传输服务">如果要开启sftp传输服务
&lt;/h2>&lt;p>&lt;a class="link" href="https://github.com/twn39/code/issues/279" target="_blank" rel="noopener"
>https://github.com/twn39/code/issues/279&lt;/a>&lt;/p>
&lt;p>开启sftp的话可以很方便用WinSCP登录，文件管理神器
&lt;img src="https://winotmk.github.io/images/20230614002052.png"
loading="lazy"
>
那么如何启用 sftp 服务呢？先安装对应的软件：&lt;/p>
&lt;p>opkg install vsftpd openssh-sftp-server
设置系统开启后自动启动 sftp 服务：&lt;/p>
&lt;pre>&lt;code class="language-shell">/etc/init.d/vsftpd enable
&lt;/code>&lt;/pre>
&lt;p>启动 sftp 服务：&lt;/p>
&lt;pre>&lt;code class="language-shell"> /etc/init.d/vsftpd start
&lt;/code>&lt;/pre>
&lt;p>这样 Openwrt 就已经启用了 sftp 服务了，可以使用客户端进行文件的传输。&lt;/p>
&lt;h2 id="装网卡驱动">装网卡驱动
&lt;/h2>&lt;p>我的CM4拓展板子是微雪的这个
&lt;img src="https://winotmk.github.io/images/20230617234921.png"
loading="lazy"
>
&lt;a class="link" href="https://www.waveshare.net/wiki/CM4-DUAL-ETH-MINI" target="_blank" rel="noopener"
>https://www.waveshare.net/wiki/CM4-DUAL-ETH-MINI&lt;/a>
有两个网口ETH0是原生ETH1是PCIe转出来的，需要安装RTL8111H芯片的网卡驱动，查了一下软件包里是有的
&lt;a class="link" href="https://openwrt.org/packages/pkgdata/kmod-r8169" target="_blank" rel="noopener"
>https://openwrt.org/packages/pkgdata/kmod-r8169&lt;/a>
那么就好办了
安装就行了：&lt;/p>
&lt;pre>&lt;code class="language-shell"> opkg install kmod-r8169
&lt;/code>&lt;/pre>
&lt;p>安装完成以重启openwrt我们看到这里已经读到了eth1口
&lt;img src="https://winotmk.github.io/images/20230614003210.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="设置路由器wan口">设置路由器WAN口
&lt;/h2>&lt;p>添加新端口，设备选装好驱动以后出现的eth1，协议我选pppoe因为我拿路由拨号&lt;/p>
&lt;p>&lt;img src="https://winotmk.github.io/images/20230614003850.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="如果要自己加安装包">如果要自己加安装包：
&lt;/h2>&lt;p>放到一个tmp目录里
CD到tmp目录&lt;/p>
&lt;pre>&lt;code>opkg install *.ipk
&lt;/code>&lt;/pre>
&lt;h2 id="关于扩容挂载点">关于扩容挂载点
&lt;/h2>&lt;p>参考资料：
&lt;a class="link" href="https://www.jianshu.com/p/e83459242afb" target="_blank" rel="noopener"
>https://www.jianshu.com/p/e83459242afb&lt;/a>
&lt;a class="link" href="https://blog.csdn.net/ls0111/article/details/128769859" target="_blank" rel="noopener"
>https://blog.csdn.net/ls0111/article/details/128769859&lt;/a>&lt;/p>
&lt;p>PS我选的是树莓派cpu对应的ext4文件系统的固件，SQUASHFS就不碰了不熟悉
首先安装安装cfdisk，注意这里要先更新下opkg&lt;/p>
&lt;pre>&lt;code class="language-shell">opkg update
opkg install cfdisk
&lt;/code>&lt;/pre>
&lt;p>然后打开cfdisk&lt;/p>
&lt;pre>&lt;code class="language-shell">cfdisk
&lt;/code>&lt;/pre>
&lt;p>但是我打不开
比如我的这块硬盘是内置EMMC硬盘, 显示名称是/dev/mmcblk0.
一般的内置硬盘应该是/dev/sda之类的.&lt;/p>
&lt;p>使用cfdisk命令，进入分区页面&lt;/p>
&lt;pre>&lt;code class="language-shell">cfdisk /dev/mmcblk0
&lt;/code>&lt;/pre>
&lt;p>如果普通是内置硬盘&lt;/p>
&lt;pre>&lt;code class="language-shell">cfdisk
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://winotmk.github.io/images/20230617234233.png"
loading="lazy"
>
按照参考资料中的教程一路继续
做到格式化新分区就可以了，注意mmcblk0p3要替换成自己的盘符&lt;/p>
&lt;pre>&lt;code class="language-shell">mkfs.ext4 /dev/mmcblk0p3
&lt;/code>&lt;/pre>
&lt;p>运行&lt;/p>
&lt;pre>&lt;code>fdisk -l
&lt;/code>&lt;/pre>
&lt;p>或者&lt;/p>
&lt;pre>&lt;code>df -h
&lt;/code>&lt;/pre>
&lt;p>命令，查看是否成功创建新分区。&lt;/p>
&lt;p>然后在Luci web界面里面增加挂载点：
我是直接从OpenWrt官网下的，不是修改版，所以木有这个选项。&lt;/p>
&lt;pre>&lt;code class="language-shell">opkg update
opkg install block-mount
&lt;/code>&lt;/pre>
&lt;p>重启路由，界面会有挂载点出现，进入
&lt;img src="https://winotmk.github.io/images/20230614222923.png"
loading="lazy"
>&lt;/p>
&lt;p>挂载刚才格式化的硬盘以后
&lt;img src="https://winotmk.github.io/images/20230614223908.png"
loading="lazy"
>&lt;/p>
&lt;p>复制这段&lt;/p>
&lt;pre>&lt;code class="language-shell">mkdir -p /tmp/introot
mkdir -p /tmp/extroot
mount --bind / /tmp/introot
mount /dev/sda1 /tmp/extroot
tar -C /tmp/introot -cvf - . | tar -C /tmp/extroot -xf -
umount /tmp/introot
umount /tmp/extroot
&lt;/code>&lt;/pre>
&lt;p>其中的&lt;/p>
&lt;pre>&lt;code>mount /dev/sda1 /tmp/extroot
&lt;/code>&lt;/pre>
&lt;p>要改为&lt;/p>
&lt;pre>&lt;code>mount /dev/mmcblk0p3 /tmp/extroot
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://winotmk.github.io/images/20230617234310.png"
loading="lazy"
>
满血了！！&lt;/p></description></item><item><title>树莓派上架设TimeMachine服务</title><link>https://winotmk.github.io/posts/%E6%A0%91%E8%8E%93%E6%B4%BEtimemachine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://winotmk.github.io/posts/%E6%A0%91%E8%8E%93%E6%B4%BEtimemachine/</guid><description>&lt;p>{% asset_img 20211013_002640.png 800 %}&lt;/p>
&lt;h2 id="命令">命令
&lt;/h2>&lt;p>前半参考：
&lt;a class="link" href="https://zhuanlan.zhihu.com/p/335259509" target="_blank" rel="noopener"
>从此Mac上的文件再也不会丟了&lt;/a>&lt;/p>
&lt;p>后半参考：
&lt;a class="link" href="https://www.jianshu.com/p/d9b180f6d397" target="_blank" rel="noopener"
>如何自己搭建一个Time Machine服务器&lt;/a>&lt;/p>
&lt;p>挂载硬盘目录&lt;/p>
&lt;pre>&lt;code>sudo mount /dev/sda2 /mnt/WinSource
&lt;/code>&lt;/pre>
&lt;p>1.安装netatalk和avahi（自己感觉avahi不装也行&lt;/p>
&lt;pre>&lt;code>sudo apt install netatalk avahi-daemon -y
&lt;/code>&lt;/pre>
&lt;p>2.创建账户wintm来访问TimeMachine，&lt;strong>至少别用root，root访问不能！&lt;/strong>&lt;/p>
&lt;pre>&lt;code>useradd -c &amp;quot;Time machine&amp;quot; -m -s /bin/bash wintm
&lt;/code>&lt;/pre>
&lt;p>然后设置密码&lt;/p>
&lt;pre>&lt;code>sudo passwd wintm
&lt;/code>&lt;/pre>
&lt;!-- more -->
&lt;p>3.配置netatalk&lt;/p>
&lt;pre>&lt;code>sudo nano /etc/netatalk/AppleVolumes.default
&lt;/code>&lt;/pre>
&lt;p>这个文件似乎一行代表一个服务
可以在&lt;/p>
&lt;pre>&lt;code># The line below sets some DEFAULT, starting with Netatalk 2.1.
:DEFAULT: options:upriv,usedots
# By default all users have access to their home directories.
~/ &amp;quot;Home Directory&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>下面加上一行&lt;/p>
&lt;pre>&lt;code>/mnt/WinSource/TimeMachine WinMachine allow:wintm options:tm
#挂在硬盘里的文件夹 afp服务名 允许wintm用户登陆 开启timemachine
&lt;/code>&lt;/pre>
&lt;p>4.重启服务&lt;/p>
&lt;pre>&lt;code>sudo service netatalk restart
sudo service avahi-daemon restart
&lt;/code>&lt;/pre>
&lt;h2 id="一些坑">一些坑
&lt;/h2>&lt;ul>
&lt;li>试图直接使用root账户连接，在这里卡了很久，还尝试在&lt;strong>AppleVolumes.default&lt;/strong>设置里写上例如&lt;/li>
&lt;/ul>
&lt;p>&lt;code>/mnt/WinSource/TimeMachine WinMachine allow:root rwlist:root options:tm&lt;/code>&lt;/p>
&lt;p>翻到这篇：&lt;a class="link" href="https://www.it610.com/article/1297957643536637952.htm" target="_blank" rel="noopener"
>[NAS之旅]-基于Centos7搭建Netatalk为Windows增加AFP协议&lt;/a>&lt;/p>
&lt;p>才忽然醒悟，&lt;strong>root用户是禁止登录AFP服务&lt;/strong>的，得嘞，新开个专门的用户吧&lt;/p>
&lt;p>提到了新建一个用户来跑timemachine：&lt;a class="link" href="https://www.jianshu.com/p/d9b180f6d397" target="_blank" rel="noopener"
>如何自己搭建一个Time Machine服务器&lt;/a>&lt;/p>
&lt;ul>
&lt;li>一开始习惯将硬盘挂载到&lt;code>/root/WinSource&lt;/code>，然鹅这似乎导致即便mac上TimeMachine连接上了也报错没法开始备份，想想也是wintm用户没有权限进root。。总结为避免不必要的麻烦以后硬盘不挂&lt;code>/root&lt;/code>里，这里我挂进了&lt;code>/mnt&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>ps:当时还试图对&lt;code>/root/WinSource&lt;/code>使用chown&lt;/p>
&lt;pre>&lt;code>sudo chown -R wintm:wintm /root/WinSource
&lt;/code>&lt;/pre>
&lt;p>见这篇：&lt;a class="link" href="https://aaron67.cc/2017/01/14/rpi-as-time-capsule/" target="_blank" rel="noopener"
>用树莓派实现 Time Capsule&lt;/a>&lt;/p>
&lt;p>无解，chown改不了&lt;code>WinSource&lt;/code>目录的所有者，root强而有力，认输&lt;/p>
&lt;h2 id="补充连接">补充连接
&lt;/h2>&lt;p>NetaTalk官方文档和下载：&lt;a class="link" href="http://netatalk.sourceforge.net/3.1/htmldocs/afp.conf.5.html" target="_blank" rel="noopener"
>http://netatalk.sourceforge.net/3.1/htmldocs/afp.conf.5.html&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://openwrt.org/zh/docs/guide-user/services/nas/netatalk_configuration#afp_netatalk_%e5%88%86%e4%ba%ab%e9%85%8d%e7%bd%ae_%e5%8f%88%e5%90%8d_apple_time_machine" target="_blank" rel="noopener"
>AFP Netatalk 分享配置 (又名 Apple Time Machine).&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.maxisvest.com/%e4%bd%bf%e7%94%a8netatalk%e6%89%93%e9%80%a0%e4%b8%80%e6%ac%be%e5%b1%9e%e4%ba%8e%e8%87%aa%e5%b7%b1%e7%9a%84Time-Machine%e5%9c%a8%e7%ba%bf%e5%a4%87%e4%bb%bd%e6%9c%8d%e5%8a%a1%e5%99%a8/" target="_blank" rel="noopener"
>使用netatalk打造一款属于自己的Time-Machine在线备份服务器&lt;/a>&lt;/p></description></item></channel></rss>