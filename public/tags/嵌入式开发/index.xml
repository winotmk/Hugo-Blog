<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>嵌入式开发 on WinNote</title><link>https://winotmk.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91/</link><description>Recent content in 嵌入式开发 on WinNote</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>winotmk</copyright><lastBuildDate>Wed, 24 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://winotmk.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml"/><item><title>段码屏开发—GPT4o带来的一点点震撼</title><link>https://winotmk.github.io/posts/240724_%E6%AE%B5%E7%A0%81%E5%B1%8F%E5%BC%80%E5%8F%91gpt4o%E5%B8%A6%E6%9D%A5%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E9%9C%87%E6%92%BC/</link><pubDate>Wed, 24 Jul 2024 00:00:00 +0000</pubDate><guid>https://winotmk.github.io/posts/240724_%E6%AE%B5%E7%A0%81%E5%B1%8F%E5%BC%80%E5%8F%91gpt4o%E5%B8%A6%E6%9D%A5%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E9%9C%87%E6%92%BC/</guid><description>&lt;img src="http://pictures.winotmk.com/240724_%E6%AE%B5%E7%A0%81%E5%B1%8F%E5%BC%80%E5%8F%91%E2%80%94GPT4o%E5%B8%A6%E6%9D%A5%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E9%9C%87%E6%92%BC/2025-03-06-14-15-27_67f17cad.png" alt="Featured image of post 段码屏开发—GPT4o带来的一点点震撼" />&lt;h2 id="硬件简介">硬件简介
&lt;/h2>&lt;h3 id="屏幕">屏幕
&lt;/h3>&lt;p>屏幕使用了一块微雪的电子墨水段码屏&lt;br>
&lt;img src="http://pictures.winotmk.com/240724_%E6%AE%B5%E7%A0%81%E5%B1%8F%E5%BC%80%E5%8F%91%E2%80%94GPT4o%E5%B8%A6%E6%9D%A5%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E9%9C%87%E6%92%BC/2025-03-06-14-12-52_fb448438.png"
loading="lazy"
alt="2025-03-06-14-12-52"
>&lt;br>
文档在这里：&lt;br>
&lt;a class="link" href="https://www.waveshare.net/wiki/1.9inch_Segment_e-Paper_Module_Manual" target="_blank" rel="noopener"
>https://www.waveshare.net/wiki/1.9inch_Segment_e-Paper_Module_Manual&lt;/a>&lt;/p>
&lt;h3 id="mcu">MCU
&lt;/h3>&lt;p>MCU方面就是树莓派的PICO，只不过是物理体积更小的版本，用法是一模一样的&lt;br>
&lt;img src="http://pictures.winotmk.com/240724_%E6%AE%B5%E7%A0%81%E5%B1%8F%E5%BC%80%E5%8F%91%E2%80%94GPT4o%E5%B8%A6%E6%9D%A5%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E9%9C%87%E6%92%BC/2025-03-06-14-13-00_cc94a142.png"
loading="lazy"
alt="2025-03-06-14-13-00"
>&lt;br>
&lt;a class="link" href="https://www.waveshare.net/wiki/RP2040-Zero" target="_blank" rel="noopener"
>https://www.waveshare.net/wiki/RP2040-Zero&lt;/a>&lt;/p>
&lt;h2 id="字节byte和比特bit的对应">字节(byte)和比特(bit)的对应
&lt;/h2>&lt;p>最近买了块高颜值段码屏，电子墨水屏原理的，一直没弄明白这个文档里说得是个啥意思，恰好最近尝试使用GPT来解决我遇到的一些编程问题，&lt;br>
本来只是抱着试试看的态度，因为自从chatgpt火了以后一直持观望态度，印象中还只是能给它设定模仿人格写写小说一类的，然而这次实在小震撼到我&lt;br>
起初这个表对于完全没接触过这块的我完全不懂他是什么意思&lt;/p>
&lt;blockquote>
&lt;p>&lt;img src="http://pictures.winotmk.com/240724_%E6%AE%B5%E7%A0%81%E5%B1%8F%E5%BC%80%E5%8F%91%E2%80%94GPT4o%E5%B8%A6%E6%9D%A5%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E9%9C%87%E6%92%BC/2025-03-06-14-13-14_466f74d2.png"
loading="lazy"
alt="2025-03-06-14-13-14"
>&lt;/p>&lt;/blockquote>
&lt;p>疑惑的关键在于0x00怎么就全0，而0xff怎么就全1了呢，于是我问GPT：&lt;br>
&lt;img src="http://pictures.winotmk.com/240724_%E6%AE%B5%E7%A0%81%E5%B1%8F%E5%BC%80%E5%8F%91%E2%80%94GPT4o%E5%B8%A6%E6%9D%A5%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E9%9C%87%E6%92%BC/2025-03-06-14-13-25_ed8f58ae.png"
loading="lazy"
alt="2025-03-06-14-13-25"
>&lt;/p>
&lt;p>*&lt;strong>以下是GPT的回答&lt;/strong>&lt;br>
在这个图表中，每个字节（byte）由 8 个比特（bit）组成，且每个比特都可以存储一个二进制值（0 或 1）。这些比特在图像中对应的像素（pixel）上，决定了每个像素的颜色（例如，黑色或白色）。&lt;/p>
&lt;h3 id="理解图表中的内容">理解图表中的内容
&lt;/h3>&lt;ol>
&lt;li>像素 (pixel): 从 1 到 16 的编号表示每个像素的位置。&lt;/li>
&lt;li>比特 (bit): 每个像素位置对应一个比特，从 7 到 0 代表一个字节中的每一位。&lt;/li>
&lt;li>存储的数据: 存储在比特中的数据值（0 或 1）。&lt;/li>
&lt;li>对应的颜色: 由数据值决定的像素颜色（黑色或白色）。&lt;br>
5。 字节 (byte): 0x00 和 0xff 表示字节的十六进制值。&lt;/li>
&lt;/ol>
&lt;h3 id="字节和比特的对应关系">字节和比特的对应关系
&lt;/h3>&lt;ul>
&lt;li>一个字节有 8 位，每一位可以是 0 或 1。&lt;/li>
&lt;li>0x00 表示 8 个比特全部为 0，转换为二进制是 00000000。&lt;/li>
&lt;li>0xff 表示 8 个比特全部为 1，转换为二进制是 11111111。&lt;/li>
&lt;/ul>
&lt;h3 id="解释示例">解释示例
&lt;/h3>&lt;ul>
&lt;li>0x00 字节:
&lt;ul>
&lt;li>二进制表示：00000000&lt;/li>
&lt;li>每个比特位都是 0，因此对应的像素颜色是黑色。&lt;/li>
&lt;li>从像素 1 到 8 的存储数据都是 0，所以对应颜色都是黑色。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>0xff 字节:
&lt;ul>
&lt;li>二进制表示：11111111&lt;/li>
&lt;li>每个比特位都是 1，因此对应的像素颜色是白色。&lt;/li>
&lt;li>从像素 9 到 16 的存储数据都是 1，所以对应颜色都是白色。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="示例代码解释">示例代码解释
&lt;/h3>&lt;p>如果你想用代码来解释字节和比特之间的关系，可以如下示例：&lt;/p>
&lt;pre>&lt;code class="language-python"># 示例字节
byte_00 = 0x00 # 所有比特位都是 0
byte_ff = 0xff # 所有比特位都是 1
# 打印二进制表示
print(f&amp;quot;0x00 的二进制表示: {bin(byte_00)[2:].zfill(8)}&amp;quot;)
print(f&amp;quot;0xff 的二进制表示: {bin(byte_ff)[2:].zfill(8)}&amp;quot;)
# 转换为像素颜色
pixels_00 = [&amp;quot;■&amp;quot; if bit == '0' else &amp;quot;□&amp;quot; for bit in bin(byte_00)[2:].zfill(8)]
pixels_ff = [&amp;quot;■&amp;quot; if bit == '0' else &amp;quot;□&amp;quot; for bit in bin(byte_ff)[2:].zfill(8)]
print(f&amp;quot;0x00 对应的像素颜色: {''.join(pixels_00)}&amp;quot;)
print(f&amp;quot;0xff 对应的像素颜色: {''.join(pixels_ff)}&amp;quot;)
&lt;/code>&lt;/pre>
&lt;h3 id="输出">输出
&lt;/h3>&lt;pre>&lt;code class="language-plaintext">复制代码
0x00 的二进制表示: 00000000
0xff 的二进制表示: 11111111
0x00 对应的像素颜色: ■■■■■■■■
0xff 对应的像素颜色: □□□□□□□□
&lt;/code>&lt;/pre>
&lt;p>在这里，■ 表示黑色像素，□ 表示白色像素。这个代码示例展示了如何根据字节中的比特值确定像素颜色。&lt;/p>
&lt;!-- more -->
&lt;p>天呐！有理有据条例清晰，秒懂了，原来byte是十六进制要转为二进制的！而8位二进制就可以表示8个数码管的开与关了！&lt;/p>
&lt;h2 id="数字显示与byte的对应">数字显示与byte的对应
&lt;/h2>&lt;p>&lt;img src="http://pictures.winotmk.com/240724_%E6%AE%B5%E7%A0%81%E5%B1%8F%E5%BC%80%E5%8F%91%E2%80%94GPT4o%E5%B8%A6%E6%9D%A5%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E9%9C%87%E6%92%BC/2025-03-06-14-14-05_de3fcb9d.png"
loading="lazy"
alt="2025-03-06-14-14-05"
>&lt;/p>
&lt;p>*&lt;strong>GPT回答：&lt;/strong>&lt;br>
为了将数字 23.8 和 54.9 表示为 DSPNUM_1in9_off 数组中的十六进制值，我们需要将每一位数字对应的十六进制编码放入数组的正确位置。根据你提供的映射：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>0 ：0xbf, 0x1f&lt;/p>
&lt;/li>
&lt;li>
&lt;p>1 ：0x00, 0x1f&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2 ：0xfd, 0x17&lt;/p>
&lt;/li>
&lt;li>
&lt;p>3 ：0xf5, 0x1f&lt;/p>
&lt;/li>
&lt;li>
&lt;p>4 ：0x47, 0x1f&lt;/p>
&lt;/li>
&lt;li>
&lt;p>5 ：0xf7, 0x1d&lt;/p>
&lt;/li>
&lt;li>
&lt;p>6 ：0xff, 0x1d&lt;/p>
&lt;/li>
&lt;li>
&lt;p>7 ：0x21, 0x1f&lt;/p>
&lt;/li>
&lt;li>
&lt;p>8 ：0xff, 0x1f&lt;br>
-9 ：0xf7, 0x1f&lt;br>
根据你的要求：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数字 A 为 23.8&lt;/p>
&lt;ul>
&lt;li>十位 2 对应 DSPNUM_1in9_off[1] 和 DSPNUM_1in9_off[2]&lt;/li>
&lt;li>个位 3 对应 DSPNUM_1in9_off[3] 和 DSPNUM_1in9_off[4]&lt;/li>
&lt;li>小数点后一位 8 对应 DSPNUM_1in9_off[11] 和 DSPNUM_1in9_off[12]&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>数字 B 为 54.9&lt;/p>
&lt;ul>
&lt;li>十位 5 对应 DSPNUM_1in9_off[5] 和 DSPNUM_1in9_off[6]&lt;/li>
&lt;li>个位 4 对应 DSPNUM_1in9_off[7] 和 DSPNUM_1in9_off[8]&lt;/li>
&lt;li>小数点后一位 9 对应 DSPNUM_1in9_off[9] 和 DSPNUM_1in9_off[10]&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="替换数组">替换数组
&lt;/h3>&lt;p>将这些值替换到数组 DSPNUM_1in9_off 中：&lt;/p>
&lt;pre>&lt;code class="language-c">unsigned char DSPNUM_1in9_off[] = {
0x00, // [0] 保持为 0x00
0xfd, // [1] 数字 A 的十位 2 对应
0x17, // [2] 数字 A 的十位 2 对应
0xf5, // [3] 数字 A 的个位 3 对应
0x1f, // [4] 数字 A 的个位 3 对应
0xf7, // [5] 数字 B 的十位 5 对应
0x1d, // [6] 数字 B 的十位 5 对应
0x47, // [7] 数字 B 的个位 4 对应
0x1f, // [8] 数字 B 的个位 4 对应
0xf7, // [9] 数字 B 的小数点后一位 9 对应
0x1f, // [10] 数字 B 的小数点后一位 9 对应
0xff, // [11] 数字 A 的小数点后一位 8 对应
0x1f, // [12] 数字 A 的小数点后一位 8 对应
0x00, // [13] 保持为 0x00
0x00, // [14] 保持为 0x00
0x00 // [15] 保持为 0x00
};
&lt;/code>&lt;/pre>
&lt;h3 id="最终数组">最终数组
&lt;/h3>&lt;pre>&lt;code class="language-c">unsigned char DSPNUM_1in9_off[] = {
0x00, 0xfd, 0x17, 0xf5, 0x1f, 0xf7, 0x1d, 0x47, 0x1f, 0xf7, 0x1f, 0xff, 0x1f, 0x00, 0x00, 0x00
};
&lt;/code>&lt;/pre>
&lt;p>这个数组 DSPNUM_1in9_off 现在包含了你要求的数字 A 和 B 的十六进制表示形式。&lt;/p>
&lt;p>GPT准确无误的理解了我的意思，这是这段代码直接得到的结果！！：&lt;br>
&lt;img src="http://pictures.winotmk.com/240724_%E6%AE%B5%E7%A0%81%E5%B1%8F%E5%BC%80%E5%8F%91%E2%80%94GPT4o%E5%B8%A6%E6%9D%A5%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E9%9C%87%E6%92%BC/2025-03-06-14-14-16_ecb74324.png"
loading="lazy"
alt="2025-03-06-14-14-16"
>&lt;/p>
&lt;h2 id="动态将数字转换为对应的段码">动态将数字转换为对应的段码
&lt;/h2>&lt;p>上面一段只是实现了数字到段码的转换，作为一个温度计肯定需要每隔一段时间就将读取的温度传到这个数组里，所以我继续问&lt;br>
&lt;img src="http://pictures.winotmk.com/240724_%E6%AE%B5%E7%A0%81%E5%B1%8F%E5%BC%80%E5%8F%91%E2%80%94GPT4o%E5%B8%A6%E6%9D%A5%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E9%9C%87%E6%92%BC/2025-03-06-14-14-26_3facd89e.png"
loading="lazy"
alt="2025-03-06-14-14-26"
>&lt;br>
GPT又准确无误的给了我方案：&lt;/p>
&lt;h3 id="动态调整数组的代码">动态调整数组的代码
&lt;/h3>&lt;p>为了动态调整 DSPNUM_1in9_off 数组，你可以编写一个函数，根据给定的 A 和 B 数值，动态设置数组的值。这个函数可以使用一个查找表来将数字映射到相应的字节值。&lt;/p>
&lt;p>以下是一个实现示例：&lt;/p>
&lt;pre>&lt;code class="language-c">#include &amp;lt;stdio.h&amp;gt;
// 定义数字对应的字节数组
unsigned char digit_bytes[10][2] = {
{0xbf, 0x1f}, // 0
{0x00, 0x1f}, // 1
{0xfd, 0x17}, // 2
{0xf5, 0x1f}, // 3
{0x47, 0x1f}, // 4
{0xf7, 0x1d}, // 5
{0xff, 0x1d}, // 6
{0x21, 0x1f}, // 7
{0xff, 0x1f}, // 8
{0xf7, 0x1f} // 9
};
// 定义DSPNUM_1in9_off数组
unsigned char DSPNUM_1in9_off[16] = {0};
// 更新数组的函数
void update_display(double A, double B) {
// 提取 A 和 B 的各位数字
int A_tens = (int)(A / 10) % 10;
int A_units = (int)A % 10;
int A_decimal = (int)(A * 10) % 10;
int B_tens = (int)(B / 10) % 10;
int B_units = (int)B % 10;
int B_decimal = (int)(B * 10) % 10;
// 设置数字 A
DSPNUM_1in9_off[1] = digit_bytes[A_tens][0];
DSPNUM_1in9_off[2] = digit_bytes[A_tens][1];
DSPNUM_1in9_off[3] = digit_bytes[A_units][0];
DSPNUM_1in9_off[4] = digit_bytes[A_units][1];
DSPNUM_1in9_off[11] = digit_bytes[A_decimal][0];
DSPNUM_1in9_off[12] = digit_bytes[A_decimal][1];
// 设置数字 B
DSPNUM_1in9_off[5] = digit_bytes[B_tens][0];
DSPNUM_1in9_off[6] = digit_bytes[B_tens][1];
DSPNUM_1in9_off[7] = digit_bytes[B_units][0];
DSPNUM_1in9_off[8] = digit_bytes[B_units][1];
DSPNUM_1in9_off[9] = digit_bytes[B_decimal][0];
DSPNUM_1in9_off[10] = digit_bytes[B_decimal][1];
}
int main() {
double A = 23.8;
double B = 54.9;
// 更新显示
update_display(A, B);
// 打印数组内容以验证
for (int i = 0; i &amp;lt; 16; i++) {
printf(&amp;quot;0x%02x &amp;quot;, DSPNUM_1in9_off[i]);
}
printf(&amp;quot;\n&amp;quot;);
return 0;
}
&lt;/code>&lt;/pre>
&lt;h3 id="解释">解释
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>数字到字节的映射表：&lt;/p>
&lt;ul>
&lt;li>digit_bytes 数组包含了每个数字（0 到 9）对应的两个字节的值。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>提取数字位：&lt;/p>
&lt;ul>
&lt;li>使用整数除法和取模运算提取 A 和 B 的十位、个位和小数点后一位。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>更新显示数组：&lt;/p>
&lt;ul>
&lt;li>使用提取到的数字位将 DSPNUM_1in9_off 数组的相应位置更新为查找表中的字节值。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>主函数：&lt;/p>
&lt;ul>
&lt;li>定义 A 和 B 的值，调用 update_display 函数更新显示数组，并打印数组内容以验证。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>这样，DSPNUM_1in9_off 数组将根据传入的 A 和 B 值动态更新。&lt;/p>
&lt;h2 id="小数点的处理">小数点的处理
&lt;/h2>&lt;p>上面已经完整实现了两个数字到数组内的转换，但是转出来没有小数点，根据文档：&lt;/p>
&lt;blockquote>
&lt;p>&lt;img src="http://pictures.winotmk.com/240724_%E6%AE%B5%E7%A0%81%E5%B1%8F%E5%BC%80%E5%8F%91%E2%80%94GPT4o%E5%B8%A6%E6%9D%A5%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E9%9C%87%E6%92%BC/2025-03-06-14-14-58_7ccfffb8.png"
loading="lazy"
alt="2025-03-06-14-14-58"
>&lt;/p>&lt;/blockquote>
&lt;p>所以要在数组的第4，8，10位做些处理&lt;/p>
&lt;p>我继续对GPT说&lt;/p>
&lt;p>&lt;img src="http://pictures.winotmk.com/240724_%E6%AE%B5%E7%A0%81%E5%B1%8F%E5%BC%80%E5%8F%91%E2%80%94GPT4o%E5%B8%A6%E6%9D%A5%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E9%9C%87%E6%92%BC/2025-03-06-14-14-41_d9de3f26.png"
loading="lazy"
alt="2025-03-06-14-14-41"
>&lt;/p>
&lt;p>GPT回答：&lt;/p>
&lt;p>为了实现这个功能，我们需要将特定数组位置的十六进制数转换为二进制，修改二进制数中的特定位，然后将其转换回十六进制并存储在数组中。&lt;/p>
&lt;p>以下是修改后的代码，包括处理 DSPNUM_1in9_off[4], DSPNUM_1in9_off[8] 和 DSPNUM_1in9_off[10]：&lt;/p>
&lt;pre>&lt;code class="language-c">#include &amp;lt;stdio.h&amp;gt;
// 定义数字对应的字节数组
unsigned char digit_bytes[10][2] = {
{0xbf, 0x1f}, // 0
{0x00, 0x1f}, // 1
{0xfd, 0x17}, // 2
{0xf5, 0x1f}, // 3
{0x47, 0x1f}, // 4
{0xf7, 0x1d}, // 5
{0xff, 0x1d}, // 6
{0x21, 0x1f}, // 7
{0xff, 0x1f}, // 8
{0xf7, 0x1f} // 9
};
// 定义DSPNUM_1in9_off数组
unsigned char DSPNUM_1in9_off[16] = {0};
// 将第六位从右往左数改成1的函数
unsigned char set_sixth_bit_to_one(unsigned char value) {
return value | (1 &amp;lt;&amp;lt; 5); // 第六位对应的二进制位是 5，从0开始计数
}
// 更新数组的函数
void update_display(double A, double B) {
// 提取 A 和 B 的各位数字
int A_tens = (int)(A / 10) % 10;
int A_units = (int)A % 10;
int A_decimal = (int)(A * 10) % 10;
int B_tens = (int)(B / 10) % 10;
int B_units = (int)B % 10;
int B_decimal = (int)(B * 10) % 10;
// 设置数字 A
DSPNUM_1in9_off[1] = digit_bytes[A_tens][0];
DSPNUM_1in9_off[2] = digit_bytes[A_tens][1];
DSPNUM_1in9_off[3] = digit_bytes[A_units][0];
DSPNUM_1in9_off[4] = set_sixth_bit_to_one(digit_bytes[A_units][1]); // 修改第六位
DSPNUM_1in9_off[11] = digit_bytes[A_decimal][0];
DSPNUM_1in9_off[12] = digit_bytes[A_decimal][1];
// 设置数字 B
DSPNUM_1in9_off[5] = digit_bytes[B_tens][0];
DSPNUM_1in9_off[6] = digit_bytes[B_tens][1];
DSPNUM_1in9_off[7] = digit_bytes[B_units][0];
DSPNUM_1in9_off[8] = set_sixth_bit_to_one(digit_bytes[B_units][1]); // 修改第六位
DSPNUM_1in9_off[9] = digit_bytes[B_decimal][0];
DSPNUM_1in9_off[10] = set_sixth_bit_to_one(digit_bytes[B_decimal][1]); // 修改第六位
}
int main() {
double A = 23.8;
double B = 54.9;
// 更新显示
update_display(A, B);
// 打印数组内容以验证
for (int i = 0; i &amp;lt; 16; i++) {
printf(&amp;quot;0x%02x &amp;quot;, DSPNUM_1in9_off[i]);
}
printf(&amp;quot;\n&amp;quot;);
return 0;
}
&lt;/code>&lt;/pre>
&lt;h3 id="解释-1">解释
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>函数 set_sixth_bit_to_one:&lt;/p>
&lt;ul>
&lt;li>使用位运算将一个字节的第六位（从右数）设置为 1。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>更新 DSPNUM_1in9_off 数组:&lt;/p>
&lt;ul>
&lt;li>按照你的要求更新数字 A 和 B 的各个位数字。&lt;/li>
&lt;li>在设置 DSPNUM_1in9_off[4], DSPNUM_1in9_off[8] 和 DSPNUM_1in9_off[10] 时，调用 set_sixth_bit_to_one 函数将其第六位设置为 1。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="结果">结果
&lt;/h3>&lt;p>运行代码后，DSPNUM_1in9_off 数组将根据 A 和 B 的值动态更新，并且 DSPNUM_1in9_off[4], DSPNUM_1in9_off[8] 和 DSPNUM_1in9_off[10] 的第六位将被设置为 1。&lt;/p>
&lt;p>然后我就得到了：&lt;br>
&lt;img src="http://pictures.winotmk.com/240724_%E6%AE%B5%E7%A0%81%E5%B1%8F%E5%BC%80%E5%8F%91%E2%80%94GPT4o%E5%B8%A6%E6%9D%A5%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E9%9C%87%E6%92%BC/2025-03-06-14-15-10_39dd407b.png"
loading="lazy"
alt="2025-03-06-14-15-10"
>&lt;br>
这里数字是我手动指定的&lt;code>A=73.6&lt;/code>,&lt;code>B=84.9&lt;/code>，可以看到小数点，百分号都已经显示出来了&lt;/p>
&lt;p>再接入传感器读到的数值，温度计就差不多完工啦：&lt;br>
&lt;img src="http://pictures.winotmk.com/240724_%E6%AE%B5%E7%A0%81%E5%B1%8F%E5%BC%80%E5%8F%91%E2%80%94GPT4o%E5%B8%A6%E6%9D%A5%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E9%9C%87%E6%92%BC/2025-03-06-14-15-27_67f17cad.png"
loading="lazy"
alt="2025-03-06-14-15-27"
>&lt;/p>
&lt;p>顺便一提这里的传感器驱动代码也是GPT帮调整的，真是神奇&lt;/p></description></item><item><title>地理数据采集器计划</title><link>https://winotmk.github.io/posts/240617_%E5%9C%B0%E7%90%86%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%99%A8%E8%AE%A1%E5%88%92/</link><pubDate>Mon, 17 Jun 2024 00:00:00 +0000</pubDate><guid>https://winotmk.github.io/posts/240617_%E5%9C%B0%E7%90%86%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%99%A8%E8%AE%A1%E5%88%92/</guid><description>&lt;p>&lt;strong>本篇未完待续&lt;/strong>&lt;/p>
&lt;h2 id="简介">简介
&lt;/h2>&lt;p>想要做一个便携的小设备，能够实现以下功能&lt;/p>
&lt;ul>
&lt;li>记录当前地点的气压，温度，湿度等地理信息&lt;/li>
&lt;li>记录GPS坐标信息&lt;/li>
&lt;li>考虑加上摄像头记录当前周围视觉环境，同时可以将上述信息水印（字幕)在照片上&lt;/li>
&lt;li>存储所有记录的数据以便之后进行可视化数据生成，可以用类似XML，Json，或者找有没有嵌入式轻量数据库实现&lt;/li>
&lt;/ul>
&lt;p>它最好有以下这样的特点：&lt;/p>
&lt;ul>
&lt;li>手机一般大小可以塞进口袋&lt;/li>
&lt;li>一定程度的防摔防水外壳&lt;/li>
&lt;li>续航可以接受2-3天一充电&lt;/li>
&lt;/ul>
&lt;p>所以我的打算用现有的能买到的小板子和单片机来做，预算不是大问题，大概1500-2000，（包含试错和学习成本）考虑过几种方向：&lt;/p>
&lt;ul>
&lt;li>ESP32&lt;/li>
&lt;li>树莓派PICO&lt;/li>
&lt;li>幸狐的板子和摄像头&lt;/li>
&lt;li>树莓派Zero&lt;br>
最后发现现在目前树莓派zero2w的价格只有一百出头了，可能比某些arduino的原版板子还便宜，值得一试，幸狐看起来也不错的样子，回头再研究&lt;/li>
&lt;/ul>
&lt;p>下面这是树莓派zero2w跑通串口通信时的样子&lt;/p>
&lt;p>&lt;img src="http://pictures.winotmk.com/240617_%E5%9C%B0%E7%90%86%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%99%A8%E8%AE%A1%E5%88%92/2025-03-06-13-55-29_616a1c93.png"
loading="lazy"
alt="2025-03-06-13-55-29"
>&lt;/p>
&lt;!-- more -->
&lt;p>这个网站不错：https://pinout.xyz/&lt;/p>
&lt;p>&lt;img src="http://pictures.winotmk.com/240617_%E5%9C%B0%E7%90%86%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%99%A8%E8%AE%A1%E5%88%92/2025-03-06-13-55-44_c483369b.png"
loading="lazy"
alt="2025-03-06-13-55-44"
>&lt;/p>
&lt;p>可知右上这几个接口就可以实现TTL的UART连接了，我尝试ground是要接的&lt;/p>
&lt;h2 id="资料">资料
&lt;/h2>&lt;h3 id="ft232串口工具">FT232串口工具
&lt;/h3>&lt;p>&lt;a class="link" href="https://www.waveshare.net/wiki/FT232_USB_UART_Board" target="_blank" rel="noopener"
>https://www.waveshare.net/wiki/FT232_USB_UART_Board&lt;/a>&lt;br>
&lt;img src="http://pictures.winotmk.com/240617_%E5%9C%B0%E7%90%86%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%99%A8%E8%AE%A1%E5%88%92/2025-03-06-13-55-54_b2bdef31.png"
loading="lazy"
alt="2025-03-06-13-55-54"
>&lt;/p>
&lt;h3 id="gps模块">GPS模块
&lt;/h3>&lt;p>&lt;a class="link" href="https://www.waveshare.net/wiki/LC76G_GPS_Module" target="_blank" rel="noopener"
>https://www.waveshare.net/wiki/LC76G_GPS_Module&lt;/a>&lt;br>
&lt;img src="http://pictures.winotmk.com/240617_%E5%9C%B0%E7%90%86%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%99%A8%E8%AE%A1%E5%88%92/2025-03-06-13-56-04_d6db8b83.png"
loading="lazy"
alt="2025-03-06-13-56-04"
>&lt;br>
在准备安装micropyGPS时&lt;br>
&lt;img src="http://pictures.winotmk.com/240617_%E5%9C%B0%E7%90%86%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%99%A8%E8%AE%A1%E5%88%92/2025-03-06-13-56-12_f3c769c0.png"
loading="lazy"
alt="2025-03-06-13-56-12"
>&lt;br>
提示&lt;code>No module namd setuptools&lt;/code>&lt;br>
怀疑需要执行&lt;br>
&lt;code>apt-get install python3-setuptools&lt;/code>&lt;br>
可惜目前没有网络环境，回家尝试了&lt;/p>
&lt;h3 id="raspberry-zero-2w">Raspberry Zero 2W
&lt;/h3>&lt;p>&lt;a class="link" href="https://www.waveshare.net/wiki/Raspberry_Pi_Zero_2_W" target="_blank" rel="noopener"
>https://www.waveshare.net/wiki/Raspberry_Pi_Zero_2_W&lt;/a>&lt;br>
&lt;img src="http://pictures.winotmk.com/240617_%E5%9C%B0%E7%90%86%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%99%A8%E8%AE%A1%E5%88%92/2025-03-06-13-56-22_1d238d2e.png"
loading="lazy"
alt="2025-03-06-13-56-22"
>&lt;/p>
&lt;h3 id="ups-模块">UPS 模块
&lt;/h3>&lt;p>&lt;a class="link" href="https://www.waveshare.net/wiki/UPS_HAT_%28C%29" target="_blank" rel="noopener"
>https://www.waveshare.net/wiki/UPS_HAT_(C)&lt;/a>&lt;br>
&lt;img src="http://pictures.winotmk.com/240617_%E5%9C%B0%E7%90%86%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%99%A8%E8%AE%A1%E5%88%92/2025-03-06-13-56-30_bb7d5dd4.png"
loading="lazy"
alt="2025-03-06-13-56-30"
>&lt;/p>
&lt;h3 id="环境传感器">环境传感器
&lt;/h3>&lt;p>&lt;a class="link" href="https://www.waveshare.net/shop/Environment-Sensor-HAT.htm" target="_blank" rel="noopener"
>https://www.waveshare.net/shop/Environment-Sensor-HAT.htm&lt;/a>&lt;br>
&lt;img src="http://pictures.winotmk.com/240617_%E5%9C%B0%E7%90%86%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%99%A8%E8%AE%A1%E5%88%92/2025-03-06-13-56-37_566b49fc.png"
loading="lazy"
alt="2025-03-06-13-56-37"
>&lt;/p>
&lt;h2 id="项目软件">项目/软件
&lt;/h2>&lt;h3 id="数据可视化相关">数据可视化相关
&lt;/h3>&lt;h4 id="很不错的开源教程data-science-for-beginners">很不错的开源教程Data-Science-For-Beginners
&lt;/h4>&lt;p>&lt;a class="link" href="https://microsoft.github.io/Data-Science-For-Beginners/#/" target="_blank" rel="noopener"
>https://microsoft.github.io/Data-Science-For-Beginners/#/&lt;/a>&lt;/p>
&lt;h4 id="matplotlib">Matplotlib
&lt;/h4>&lt;p>&lt;a class="link" href="https://matplotlib.org/stable/index.html" target="_blank" rel="noopener"
>https://matplotlib.org/stable/index.html&lt;/a>&lt;br>
Matplotlib是一个出色的库，可用于创建各种简单和复杂的图表&lt;br>
&lt;a class="link" href="https://microsoft.github.io/Data-Science-For-Beginners/#/3-Data-Visualization/09-visualization-quantities/README" target="_blank" rel="noopener"
>https://microsoft.github.io/Data-Science-For-Beginners/#/3-Data-Visualization/09-visualization-quantities/README&lt;/a>&lt;br>
&lt;img src="http://pictures.winotmk.com/240617_%E5%9C%B0%E7%90%86%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%99%A8%E8%AE%A1%E5%88%92/2025-03-06-13-56-45_e17dc142.png"
loading="lazy"
alt="2025-03-06-13-56-45"
>&lt;/p>
&lt;h4 id="streamlit">Streamlit
&lt;/h4>&lt;p>&lt;a class="link" href="https://github.com/streamlit/streamlit" target="_blank" rel="noopener"
>https://github.com/streamlit/streamlit&lt;/a>&lt;br>
&lt;img src="http://pictures.winotmk.com/240617_%E5%9C%B0%E7%90%86%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%99%A8%E8%AE%A1%E5%88%92/2025-03-06-13-56-54_ffc25315.png"
loading="lazy"
alt="2025-03-06-13-56-54"
>&lt;br>
更偏向于python库直接生成web，同时也有很多数据可视化的内容，更实用？便于展示&lt;/p>
&lt;h4 id="powerbi">powerbi
&lt;/h4>&lt;p>&lt;a class="link" href="https://www.microsoft.com/en-us/power-platform/products/power-bi" target="_blank" rel="noopener"
>https://www.microsoft.com/en-us/power-platform/products/power-bi&lt;/a>&lt;br>
似乎是微软的web数据可视化绘图&lt;/p>
&lt;h4 id="gpxsee">GPXSee
&lt;/h4>&lt;p>配合gps数据收集可以展示出来&lt;br>
&lt;a class="link" href="https://github.com/tumic0/GPXSee" target="_blank" rel="noopener"
>https://github.com/tumic0/GPXSee&lt;/a>&lt;br>
&lt;img src="http://pictures.winotmk.com/240617_%E5%9C%B0%E7%90%86%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%99%A8%E8%AE%A1%E5%88%92/2025-03-06-13-57-10_901a5033.png"
loading="lazy"
alt="2025-03-06-13-57-10"
>&lt;/p>
&lt;h3 id="图形库">图形库
&lt;/h3>&lt;h4 id="lvgl">LVGL
&lt;/h4>&lt;p>&lt;a class="link" href="https://lvgl.100ask.net/master/get-started/index.html" target="_blank" rel="noopener"
>https://lvgl.100ask.net/master/get-started/index.html&lt;/a>&lt;br>
&lt;a class="link" href="https://github.com/lvgl/lvgl" target="_blank" rel="noopener"
>https://github.com/lvgl/lvgl&lt;/a>&lt;br>
&lt;img src="http://pictures.winotmk.com/240617_%E5%9C%B0%E7%90%86%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%99%A8%E8%AE%A1%E5%88%92/2025-03-06-13-57-20_6be3bee8.png"
loading="lazy"
alt="2025-03-06-13-57-20"
>&lt;/p>
&lt;h4 id="squareline-studio-ui---配合上面的lvgl用">SquareLine Studio UI - 配合上面的LVGL用
&lt;/h4>&lt;p>&lt;a class="link" href="https://squareline.io/" target="_blank" rel="noopener"
>https://squareline.io/&lt;/a>&lt;br>
&lt;a class="link" href="https://www.bilibili.com/video/BV1DX4y1v727/?vd_source=b7b7bdf106a064893c3c79e4a961f383" target="_blank" rel="noopener"
>https://www.bilibili.com/video/BV1DX4y1v727/?vd_source=b7b7bdf106a064893c3c79e4a961f383&lt;/a>&lt;/p>
&lt;p>&lt;img src="http://pictures.winotmk.com/240617_%E5%9C%B0%E7%90%86%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%99%A8%E8%AE%A1%E5%88%92/2025-03-06-13-57-30_6a061a76.png"
loading="lazy"
alt="2025-03-06-13-57-30"
>&lt;/p>
&lt;h4 id="guiguider-同上类别但免费">guiguider 同上类别但免费
&lt;/h4>&lt;p>&lt;a class="link" href="https://www.bilibili.com/video/BV1yW421R7zK/?spm_id_from=333.788.recommend_more_video.7&amp;amp;vd_source=b7b7bdf106a064893c3c79e4a961f383" target="_blank" rel="noopener"
>https://www.bilibili.com/video/BV1yW421R7zK/?spm_id_from=333.788.recommend_more_video.7&amp;vd_source=b7b7bdf106a064893c3c79e4a961f383&lt;/a>&lt;br>
&lt;img src="http://pictures.winotmk.com/240617_%E5%9C%B0%E7%90%86%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%99%A8%E8%AE%A1%E5%88%92/2025-03-06-13-57-41_db8d5d62.png"
loading="lazy"
alt="2025-03-06-13-57-41"
>&lt;/p>
&lt;h4 id="figma">figma
&lt;/h4>&lt;p>UI前期设计软件&lt;br>
&lt;img src="http://pictures.winotmk.com/240617_%E5%9C%B0%E7%90%86%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%99%A8%E8%AE%A1%E5%88%92/2025-03-06-13-57-53_4aab6d55.png"
loading="lazy"
alt="2025-03-06-13-57-53"
>&lt;/p>
&lt;h4 id="ui-框架oled-ui-astra">UI 框架：oled-ui-astra
&lt;/h4>&lt;p>&lt;a class="link" href="https://github.com/AstraThreshold/oled-ui-astra" target="_blank" rel="noopener"
>https://github.com/AstraThreshold/oled-ui-astra&lt;/a>&lt;br>
&lt;a class="link" href="https://www.bilibili.com/video/BV1i4421D7nJ/?vd_source=b7b7bdf106a064893c3c79e4a961f383" target="_blank" rel="noopener"
>https://www.bilibili.com/video/BV1i4421D7nJ/?vd_source=b7b7bdf106a064893c3c79e4a961f383&lt;/a>&lt;/p>
&lt;p>&lt;img src="http://pictures.winotmk.com/240617_%E5%9C%B0%E7%90%86%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%99%A8%E8%AE%A1%E5%88%92/2025-03-06-13-58-01_1f2ed591.png"
loading="lazy"
alt="2025-03-06-13-58-01"
>&lt;/p></description></item></channel></rss>