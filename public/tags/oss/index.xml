<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OSS on WinNote</title><link>https://winotmk.github.io/tags/oss/</link><description>Recent content in OSS on WinNote</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>winotmk</copyright><lastBuildDate>Thu, 20 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://winotmk.github.io/tags/oss/index.xml" rel="self" type="application/rss+xml"/><item><title>Hugo_GithubAction自动部署到阿里云OSS</title><link>https://winotmk.github.io/posts/250221_hugo_githubaction%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91oss/</link><pubDate>Thu, 20 Feb 2025 00:00:00 +0000</pubDate><guid>https://winotmk.github.io/posts/250221_hugo_githubaction%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91oss/</guid><description>&lt;p>整了大半天，总算明白GithubAction是怎么用的了，给人感觉其实有那么些像docker，而需要为其写的action规则又像dockerfile或者dockercompose，它们都是去调用一些已经做好的功能/镜像，来按步骤去一步步达成一些事
参考文章：
&lt;a class="link" href="https://thooooor.github.io/posts/%E8%84%B1%E5%9D%91%E8%AE%B0%E5%BD%95/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener"
>https://thooooor.github.io/posts/%E8%84%B1%E5%9D%91%E8%AE%B0%E5%BD%95/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/&lt;/a>
&lt;a class="link" href="https://kingtuo123.com/posts/hugo-deploy/" target="_blank" rel="noopener"
>https://kingtuo123.com/posts/hugo-deploy/&lt;/a>
&lt;a class="link" href="https://zhuanlan.zhihu.com/p/367426039" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/367426039&lt;/a>&lt;/p>
&lt;h2 id="参考链接">参考链接
&lt;/h2>&lt;p>action：
&lt;a class="link" href="https://github.com/manyuanrong/setup-ossutil" target="_blank" rel="noopener"
>https://github.com/manyuanrong/setup-ossutil&lt;/a>
&lt;a class="link" href="https://github.com/peaceiris/actions-hugo" target="_blank" rel="noopener"
>https://github.com/peaceiris/actions-hugo&lt;/a>&lt;/p>
&lt;p>hugo和其主题：
&lt;a class="link" href="https://gohugo.io/getting-started/quick-start/" target="_blank" rel="noopener"
>https://gohugo.io/getting-started/quick-start/&lt;/a>
&lt;a class="link" href="https://github.com/adityatelange/hugo-PaperMod" target="_blank" rel="noopener"
>https://github.com/adityatelange/hugo-PaperMod&lt;/a>&lt;/p>
&lt;p>当你通过 &lt;code>git push&lt;/code> 触发 GitHub Actions 流程时，需要将 &lt;strong>Hugo 博客的源代码&lt;/strong>推送到仓库。以下是具体操作步骤和本地准备：&lt;/p>
&lt;hr>
&lt;h3 id="一本地准备工作">&lt;strong>一、本地准备工作&lt;/strong>
&lt;/h3>&lt;h4 id="1-项目结构要求">1. &lt;strong>项目结构要求&lt;/strong>
&lt;/h4>&lt;p>你的本地 Hugo 博客项目需要包含以下内容：&lt;/p>
&lt;pre>&lt;code>your-blog-repo/
├── .github/workflows/deploy.yml # 你的 GitHub Actions 配置文件
├── content/ # 博客文章
├── themes/ # Hugo 主题（通常作为 Git 子模块）
├── config.toml # Hugo 配置文件
└── (其他 Hugo 相关文件)
&lt;/code>&lt;/pre>
&lt;h4 id="2-本地环境配置">2. &lt;strong>本地环境配置&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>安装 Git&lt;/strong>：确保已安装 Git 并配置好 GitHub 账户。&lt;/li>
&lt;li>&lt;strong>安装 Hugo&lt;/strong>（可选）：&lt;br>
建议本地安装 Hugo 用于测试（与 Actions 中版本一致）：
&lt;pre>&lt;code class="language-bash">brew install hugo # macOS
# 或参考 Hugo 官方文档 https://gohugo.io/installation/
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;h4 id="3-初始化-git-仓库">3. &lt;strong>初始化 Git 仓库&lt;/strong>
&lt;/h4>&lt;pre>&lt;code class="language-bash">cd your-blog-repo
git init
git remote add origin https://github.com/你的用户名/你的仓库名.git
&lt;/code>&lt;/pre>
&lt;h4 id="4-处理子模块主题">4. &lt;strong>处理子模块（主题）&lt;/strong>
&lt;/h4>&lt;p>如果使用了 Hugo 主题（如通过 Git 子模块添加）：&lt;/p>
&lt;pre>&lt;code class="language-bash"># 示例：添加主题为子模块
git submodule add https://github.com/主题作者/主题仓库.git themes/主题名
&lt;/code>&lt;/pre>
&lt;p>确保 &lt;code>.gitmodules&lt;/code> 文件已提交。&lt;/p>
&lt;hr>
&lt;h3 id="二触发-actions-的-push-内容">&lt;strong>二、触发 Actions 的 Push 内容&lt;/strong>
&lt;/h3>&lt;p>你需要将以下内容推送到 GitHub 仓库：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Hugo 源文件&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>config.toml&lt;/code>（Hugo 配置）&lt;/li>
&lt;li>&lt;code>content/&lt;/code>（文章）&lt;/li>
&lt;li>&lt;code>themes/&lt;/code>（主题，通常以子模块形式存在）&lt;/li>
&lt;li>&lt;code>archetypes/&lt;/code>、&lt;code>static/&lt;/code> 等其他 Hugo 所需文件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>GitHub Actions 配置文件&lt;/strong>&lt;br>
确保 &lt;code>.github/workflows/deploy.yml&lt;/code> 文件存在于仓库中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>不包含生成的文件&lt;/strong>&lt;br>
&lt;strong>不要推送&lt;/strong> &lt;code>public/&lt;/code> 目录（Hugo 生成的静态文件会被 Actions 自动构建）。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="三操作流程示例">&lt;strong>三、操作流程示例&lt;/strong>
&lt;/h3>&lt;h4 id="1-本地修改并测试">1. &lt;strong>本地修改并测试&lt;/strong>
&lt;/h4>&lt;pre>&lt;code class="language-bash"># 本地生成静态文件测试（可选）
hugo server -D # 启动本地预览
&lt;/code>&lt;/pre>
&lt;h4 id="2-提交代码">2. &lt;strong>提交代码&lt;/strong>
&lt;/h4>&lt;pre>&lt;code class="language-bash">git add .
git commit -m &amp;quot;更新博客内容&amp;quot;
&lt;/code>&lt;/pre>
&lt;h4 id="3-推送到-github">3. &lt;strong>推送到 GitHub&lt;/strong>
&lt;/h4>&lt;pre>&lt;code class="language-bash">git push -u origin main # 假设主分支是 main
&lt;/code>&lt;/pre>
&lt;h4 id="4-触发-actions">4. &lt;strong>触发 Actions&lt;/strong>
&lt;/h4>&lt;p>推送后，到 GitHub 仓库的 &lt;strong>Actions&lt;/strong> 标签页查看运行状态。&lt;br>
若流程成功，阿里云 OSS 的存储桶中会自动出现 &lt;code>public/&lt;/code> 的内容。&lt;/p>
&lt;hr>
&lt;h3 id="四关键注意事项">&lt;strong>四、关键注意事项&lt;/strong>
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>分支匹配&lt;/strong>&lt;br>
确保工作流配置中的 &lt;code>push&lt;/code> 事件分支（默认所有分支）与你推送的分支一致。&lt;br>
（若需限制分支，可在配置中指定：&lt;code>on.push.branches: [main]&lt;/code>）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>密钥安全&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>阿里云的 &lt;code>OSS_KEY_ID&lt;/code> 和 &lt;code>OSS_KEY_SECRET&lt;/code> 必须通过 GitHub 仓库的 &lt;strong>Settings → Secrets&lt;/strong> 添加，&lt;strong>不要明文写在代码中&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>子模块更新&lt;/strong>&lt;br>
如果主题子模块有更新，需在本地执行：&lt;/p>
&lt;pre>&lt;code class="language-bash">git submodule update --remote --merge
git add themes/主题名
git commit -m &amp;quot;更新主题&amp;quot;
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>调试失败问题&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>若 Actions 运行失败，检查日志中的报错信息（如 Hugo 版本冲突、OSS 权限不足等）。&lt;/li>
&lt;li>本地可通过 &lt;code>hugo --minify&lt;/code> 命令预验证构建是否正常。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="五流程图解">&lt;strong>五、流程图解&lt;/strong>
&lt;/h3>&lt;pre>&lt;code>本地修改博客内容 → 提交并推送 → GitHub 触发 Actions → 自动构建 Hugo → 上传到 OSS
（无需手动操作部署）
&lt;/code>&lt;/pre>
&lt;p>通过这种方式，你只需专注于内容创作和本地代码修改，部署过程会完全自动化。&lt;/p>
&lt;h2 id="其他">其他
&lt;/h2>&lt;p>hexo的GithubAction自动部署，用了两个仓库——github.io与hexo项目仓库区分操作
&lt;a class="link" href="https://hackergavin.com/2024/01/11/hexo-automate-deploy/#%E5%88%9B%E5%BB%BA-Github-Actions-%E8%84%9A%E6%9C%AC" target="_blank" rel="noopener"
>https://hackergavin.com/2024/01/11/hexo-automate-deploy/#%E5%88%9B%E5%BB%BA-Github-Actions-%E8%84%9A%E6%9C%AC&lt;/a>&lt;/p>
&lt;p>另外一种hexo部署
&lt;a class="link" href="https://cloud.tencent.com/developer/article/2369534" target="_blank" rel="noopener"
>https://cloud.tencent.com/developer/article/2369534&lt;/a>&lt;/p></description></item></channel></rss>