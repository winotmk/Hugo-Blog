<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Github on WinNote</title>
        <link>http://localhost:5325/tags/github/</link>
        <description>Recent content in Github on WinNote</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>winotmk</copyright>
        <lastBuildDate>Fri, 21 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:5325/tags/github/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Git常用命令</title>
        <link>http://localhost:5325/posts/250221_git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
        <pubDate>Fri, 21 Feb 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:5325/posts/250221_git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
        <description>&lt;h3 id=&#34;1-进入本地仓库目录&#34;&gt;&lt;strong&gt;1. 进入本地仓库目录&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;打开终端（或 Git Bash），切换到仓库根目录：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /path/to/your-repo
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;2-查看修改状态&#34;&gt;&lt;strong&gt;2. 查看修改状态&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;检查哪些文件被修改：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git status
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;红色显示的文件表示已修改但未添加到暂存区。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;3-将修改添加到暂存区&#34;&gt;&lt;strong&gt;3. 将修改添加到暂存区&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;添加单个文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add 文件名
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或添加所有修改的文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再次运行 &lt;code&gt;git status&lt;/code&gt;，绿色显示的文件表示已添加到暂存区。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;4-提交修改到本地仓库&#34;&gt;&lt;strong&gt;4. 提交修改到本地仓库&lt;/strong&gt;
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git commit -m &amp;quot;描述你的修改内容（例如：修复登录页面样式问题）&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-m&lt;/code&gt; 后跟提交信息，需简洁明确（推荐使用英文或中文）。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;5-推送修改到远程仓库&#34;&gt;&lt;strong&gt;5. 推送修改到远程仓库&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;将本地提交推送到远程仓库（默认分支通常是 &lt;code&gt;main&lt;/code&gt; 或 &lt;code&gt;master&lt;/code&gt;）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push origin 分支名
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;例如推送到 &lt;code&gt;main&lt;/code&gt; 分支：
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push origin main
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;6-验证推送结果&#34;&gt;&lt;strong&gt;6. 验证推送结果&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;访问远程仓库页面（如 GitHub），检查文件是否更新。&lt;/li&gt;
&lt;li&gt;或通过命令查看远程状态：
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git log --oneline  # 查看本地提交记录
git remote show origin  # 检查远程仓库状态
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;常见问题&#34;&gt;&lt;strong&gt;常见问题&lt;/strong&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;提交后发现漏了文件&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 继续修改文件，然后再次添加并提交
git add 漏掉的文件名
git commit --amend  # 合并到上一次提交
git push -f origin 分支名  # 强制推送（仅限自己的分支）
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;推送冲突&lt;/strong&gt;（多人协作时可能发生）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git pull origin 分支名  # 先拉取远程最新代码，解决冲突后再推送
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;默认情况下直接使用 &lt;code&gt;git clone&lt;/code&gt; 不会自动克隆子模块（submodule）。子模块信息虽然记录在 &lt;code&gt;.gitmodules&lt;/code&gt; 文件中，但其代码需要额外操作才能同步到本地。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;如何完整克隆包含子模块的仓库&#34;&gt;&lt;strong&gt;如何完整克隆包含子模块的仓库？&lt;/strong&gt;
&lt;/h3&gt;&lt;h4 id=&#34;方法-1递归克隆推荐&#34;&gt;&lt;strong&gt;方法 1：递归克隆（推荐）&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;在克隆时添加 &lt;code&gt;--recurse-submodules&lt;/code&gt; 参数，&lt;strong&gt;一次性递归克隆主仓库和所有子模块&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recurse-submodules 仓库URL
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;方法-2克隆后初始化子模块&#34;&gt;&lt;strong&gt;方法 2：克隆后初始化子模块&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;如果已经用普通方式克隆了主仓库，后续可以手动拉取子模块：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 进入主仓库目录
cd your-repo

# 初始化子模块配置（从 .gitmodules 读取）
git submodule init

# 拉取子模块代码
git submodule update

# 或者合并成一步：
git submodule update --init
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;验证子模块&#34;&gt;&lt;strong&gt;验证子模块&lt;/strong&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;查看子模块目录是否包含文件（不再是空文件夹）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls -la path/to/submodule
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检查子模块状态：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule status
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;常见问题-1&#34;&gt;&lt;strong&gt;常见问题&lt;/strong&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;子模块更新失败&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保子模块的仓库地址可访问（尤其是私有仓库）。&lt;/li&gt;
&lt;li&gt;如果子模块本身也有嵌套子模块，使用：
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;切换分支后子模块内容异常&lt;/strong&gt;：
主仓库切换分支时，子模块可能需要同步更新到对应提交：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule update --remote
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;子模块工作原理&#34;&gt;&lt;strong&gt;子模块工作原理&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;主仓库只记录子模块的&lt;strong&gt;具体提交哈希&lt;/strong&gt;，不保存子模块的代码。&lt;/li&gt;
&lt;li&gt;子模块是独立的仓库，需要单独拉取和更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;设置代理&#34;&gt;设置代理
&lt;/h2&gt;&lt;p&gt;git config &amp;ndash;global http.proxy http://127.0.0.1:7080
git config &amp;ndash;global https.proxy https://127.0.0.1:7080
取消设置代理
git config &amp;ndash;global &amp;ndash;unset http.proxy
git config &amp;ndash;global &amp;ndash;unset https.proxy
可以通过
git config -l
查看设置状态&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Hugo_GithubAction自动部署到阿里云OSS</title>
        <link>http://localhost:5325/posts/250221_hugo_githubaction%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91oss/</link>
        <pubDate>Thu, 20 Feb 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:5325/posts/250221_hugo_githubaction%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91oss/</guid>
        <description>&lt;p&gt;整了大半天，总算明白GithubAction是怎么用的了，给人感觉其实有那么些像docker，而需要为其写的action规则又像dockerfile或者dockercompose，它们都是去调用一些已经做好的功能/镜像，来按步骤去一步步达成一些事
参考文章：
&lt;a class=&#34;link&#34; href=&#34;https://thooooor.github.io/posts/%E8%84%B1%E5%9D%91%E8%AE%B0%E5%BD%95/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://thooooor.github.io/posts/%E8%84%B1%E5%9D%91%E8%AE%B0%E5%BD%95/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://kingtuo123.com/posts/hugo-deploy/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://kingtuo123.com/posts/hugo-deploy/&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/367426039&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/367426039&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考链接&#34;&gt;参考链接
&lt;/h2&gt;&lt;p&gt;action：
&lt;a class=&#34;link&#34; href=&#34;https://github.com/manyuanrong/setup-ossutil&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/manyuanrong/setup-ossutil&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://github.com/peaceiris/actions-hugo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/peaceiris/actions-hugo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;hugo和其主题：
&lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/getting-started/quick-start/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gohugo.io/getting-started/quick-start/&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://github.com/adityatelange/hugo-PaperMod&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/adityatelange/hugo-PaperMod&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当你通过 &lt;code&gt;git push&lt;/code&gt; 触发 GitHub Actions 流程时，需要将 &lt;strong&gt;Hugo 博客的源代码&lt;/strong&gt;推送到仓库。以下是具体操作步骤和本地准备：&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;一本地准备工作&#34;&gt;&lt;strong&gt;一、本地准备工作&lt;/strong&gt;
&lt;/h3&gt;&lt;h4 id=&#34;1-项目结构要求&#34;&gt;1. &lt;strong&gt;项目结构要求&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;你的本地 Hugo 博客项目需要包含以下内容：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;your-blog-repo/
├── .github/workflows/deploy.yml   # 你的 GitHub Actions 配置文件
├── content/                       # 博客文章
├── themes/                        # Hugo 主题（通常作为 Git 子模块）
├── config.toml                    # Hugo 配置文件
└── (其他 Hugo 相关文件)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-本地环境配置&#34;&gt;2. &lt;strong&gt;本地环境配置&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安装 Git&lt;/strong&gt;：确保已安装 Git 并配置好 GitHub 账户。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安装 Hugo&lt;/strong&gt;（可选）：&lt;br&gt;
建议本地安装 Hugo 用于测试（与 Actions 中版本一致）：
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install hugo  # macOS
# 或参考 Hugo 官方文档 https://gohugo.io/installation/
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-初始化-git-仓库&#34;&gt;3. &lt;strong&gt;初始化 Git 仓库&lt;/strong&gt;
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd your-blog-repo
git init
git remote add origin https://github.com/你的用户名/你的仓库名.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-处理子模块主题&#34;&gt;4. &lt;strong&gt;处理子模块（主题）&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;如果使用了 Hugo 主题（如通过 Git 子模块添加）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 示例：添加主题为子模块
git submodule add https://github.com/主题作者/主题仓库.git themes/主题名
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;确保 &lt;code&gt;.gitmodules&lt;/code&gt; 文件已提交。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;二触发-actions-的-push-内容&#34;&gt;&lt;strong&gt;二、触发 Actions 的 Push 内容&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;你需要将以下内容推送到 GitHub 仓库：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hugo 源文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config.toml&lt;/code&gt;（Hugo 配置）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;content/&lt;/code&gt;（文章）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;themes/&lt;/code&gt;（主题，通常以子模块形式存在）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;archetypes/&lt;/code&gt;、&lt;code&gt;static/&lt;/code&gt; 等其他 Hugo 所需文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GitHub Actions 配置文件&lt;/strong&gt;&lt;br&gt;
确保 &lt;code&gt;.github/workflows/deploy.yml&lt;/code&gt; 文件存在于仓库中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不包含生成的文件&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;不要推送&lt;/strong&gt; &lt;code&gt;public/&lt;/code&gt; 目录（Hugo 生成的静态文件会被 Actions 自动构建）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;三操作流程示例&#34;&gt;&lt;strong&gt;三、操作流程示例&lt;/strong&gt;
&lt;/h3&gt;&lt;h4 id=&#34;1-本地修改并测试&#34;&gt;1. &lt;strong&gt;本地修改并测试&lt;/strong&gt;
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 本地生成静态文件测试（可选）
hugo server -D  # 启动本地预览
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-提交代码&#34;&gt;2. &lt;strong&gt;提交代码&lt;/strong&gt;
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;更新博客内容&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-推送到-github&#34;&gt;3. &lt;strong&gt;推送到 GitHub&lt;/strong&gt;
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push -u origin main  # 假设主分支是 main
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-触发-actions&#34;&gt;4. &lt;strong&gt;触发 Actions&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;推送后，到 GitHub 仓库的 &lt;strong&gt;Actions&lt;/strong&gt; 标签页查看运行状态。&lt;br&gt;
若流程成功，阿里云 OSS 的存储桶中会自动出现 &lt;code&gt;public/&lt;/code&gt; 的内容。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;四关键注意事项&#34;&gt;&lt;strong&gt;四、关键注意事项&lt;/strong&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分支匹配&lt;/strong&gt;&lt;br&gt;
确保工作流配置中的 &lt;code&gt;push&lt;/code&gt; 事件分支（默认所有分支）与你推送的分支一致。&lt;br&gt;
（若需限制分支，可在配置中指定：&lt;code&gt;on.push.branches: [main]&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;密钥安全&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阿里云的 &lt;code&gt;OSS_KEY_ID&lt;/code&gt; 和 &lt;code&gt;OSS_KEY_SECRET&lt;/code&gt; 必须通过 GitHub 仓库的 &lt;strong&gt;Settings → Secrets&lt;/strong&gt; 添加，&lt;strong&gt;不要明文写在代码中&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;子模块更新&lt;/strong&gt;&lt;br&gt;
如果主题子模块有更新，需在本地执行：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule update --remote --merge
git add themes/主题名
git commit -m &amp;quot;更新主题&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;调试失败问题&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 Actions 运行失败，检查日志中的报错信息（如 Hugo 版本冲突、OSS 权限不足等）。&lt;/li&gt;
&lt;li&gt;本地可通过 &lt;code&gt;hugo --minify&lt;/code&gt; 命令预验证构建是否正常。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;五流程图解&#34;&gt;&lt;strong&gt;五、流程图解&lt;/strong&gt;
&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;本地修改博客内容 → 提交并推送 → GitHub 触发 Actions → 自动构建 Hugo → 上传到 OSS
                        （无需手动操作部署）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过这种方式，你只需专注于内容创作和本地代码修改，部署过程会完全自动化。&lt;/p&gt;
&lt;h2 id=&#34;其他&#34;&gt;其他
&lt;/h2&gt;&lt;p&gt;hexo的GithubAction自动部署，用了两个仓库——github.io与hexo项目仓库区分操作
&lt;a class=&#34;link&#34; href=&#34;https://hackergavin.com/2024/01/11/hexo-automate-deploy/#%E5%88%9B%E5%BB%BA-Github-Actions-%E8%84%9A%E6%9C%AC&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://hackergavin.com/2024/01/11/hexo-automate-deploy/#%E5%88%9B%E5%BB%BA-Github-Actions-%E8%84%9A%E6%9C%AC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另外一种hexo部署
&lt;a class=&#34;link&#34; href=&#34;https://cloud.tencent.com/developer/article/2369534&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cloud.tencent.com/developer/article/2369534&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>生成秘钥连接至github————用来推hexo</title>
        <link>http://localhost:5325/posts/%E7%94%9F%E6%88%90%E7%A7%98%E9%92%A5%E8%BF%9E%E6%8E%A5%E8%87%B3github_%E7%94%A8%E6%9D%A5%E6%8E%A8hexo/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:5325/posts/%E7%94%9F%E6%88%90%E7%A7%98%E9%92%A5%E8%BF%9E%E6%8E%A5%E8%87%B3github_%E7%94%A8%E6%9D%A5%E6%8E%A8hexo/</guid>
        <description>&lt;h2 id=&#34;生成秘钥&#34;&gt;生成秘钥
&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;ssh-keygen -t ed25519 -C &amp;quot;550330147@qq.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;邮箱自然是我的git注册邮箱&lt;/p&gt;
&lt;h2 id=&#34;如果修改passphrade密码&#34;&gt;如果修改passphrade密码
&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;ssh-keygen -p -f ~/.ssh/id_ed25519
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;直接enter即密码为空，这是秘钥的密码&lt;/p&gt;
&lt;h2 id=&#34;复制秘钥到github&#34;&gt;复制秘钥到github
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:5325/images/20230618002355.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
打开/root/.ssh/id_ed25519.pub
复制到这里
&lt;img src=&#34;http://localhost:5325/images/20230618002554.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;a class=&#34;link&#34; href=&#34;https://github.com/settings/ssh/new&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/settings/ssh/new&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PS官方已不推荐用rsa加密&lt;/p&gt;
&lt;h2 id=&#34;测试&#34;&gt;测试
&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;ssh -T git@github.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:5325/images/20230618003332.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
这里输入yes
&lt;img src=&#34;http://localhost:5325/images/20230618003428.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
成功！&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
