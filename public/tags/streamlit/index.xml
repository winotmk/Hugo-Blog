<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Streamlit on WinNote</title><link>https://winotmk.github.io/tags/streamlit/</link><description>Recent content in Streamlit on WinNote</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>winotmk</copyright><lastBuildDate>Wed, 24 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://winotmk.github.io/tags/streamlit/index.xml" rel="self" type="application/rss+xml"/><item><title>用容器来运行streamlit</title><link>https://winotmk.github.io/posts/240724_%E7%94%A8%E5%AE%B9%E5%99%A8%E6%9D%A5%E8%BF%90%E8%A1%8Cstreamlit/</link><pubDate>Wed, 24 Jul 2024 00:00:00 +0000</pubDate><guid>https://winotmk.github.io/posts/240724_%E7%94%A8%E5%AE%B9%E5%99%A8%E6%9D%A5%E8%BF%90%E8%A1%8Cstreamlit/</guid><description>&lt;p>&lt;img src="https://winotmk.github.io/images/20240724152543.png"
loading="lazy"
>
一开始玩这个的时候就在想用docker跑，因为实在不想在本机里搭各种乱七八糟的环境，也懒得用Anaconda那样的中间环境，总感觉本地跑个模型才用得上那种大玩意儿，于是在dockerhub上找了找
一些已有的可用镜像：
&lt;a class="link" href="https://hub.docker.com/r/aminehy/docker-streamlit-app" target="_blank" rel="noopener"
>https://hub.docker.com/r/aminehy/docker-streamlit-app&lt;/a>
&lt;a class="link" href="https://hub.docker.com/r/samdobson/streamlit" target="_blank" rel="noopener"
>https://hub.docker.com/r/samdobson/streamlit&lt;/a>
就是镜像build都好几年前了，实测目前有些新的例程都跑不了，还是自己做个镜像吧&lt;/p>
&lt;h2 id="制作dockerfile">制作dockerfile
&lt;/h2>&lt;p>&lt;a class="link" href="https://docs.streamlit.io/deploy/tutorials/docker" target="_blank" rel="noopener"
>https://docs.streamlit.io/deploy/tutorials/docker&lt;/a>
好在官网已给出方案
这是我微改后的：&lt;/p>
&lt;pre>&lt;code># app/Dockerfile
FROM python:3.9-slim
WORKDIR /app
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
build-essential \
curl \
software-properties-common \
git \
&amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
RUN git clone https://github.com/streamlit/streamlit-example.git .
RUN pip3 install -r requirements.txt
EXPOSE 8501
HEALTHCHECK CMD curl --fail http://localhost:8501/_stcore/health
CMD [&amp;quot;streamlit&amp;quot;, &amp;quot;run&amp;quot;, &amp;quot;main.py&amp;quot;, &amp;quot;--server.port=8501&amp;quot;, &amp;quot;--server.address=0.0.0.0&amp;quot;]
&lt;/code>&lt;/pre>
&lt;!-- more -->
&lt;p>主要就最后一行并没有用&lt;code>ENTRYPOINT&lt;/code>，因为记得这个不是必须，用&lt;code>CMD&lt;/code>的好处是非常方便的就能修改&lt;code>docker run&lt;/code>时要运行的内容&lt;/p>
&lt;h2 id="构建和使用镜像">构建和使用镜像
&lt;/h2>&lt;p>打开CMD，CD到这个Dockerfile保存的目录下
&lt;code>docker build -t streamlit_winotmk:latest . &lt;/code>点不要落下&lt;/p>
&lt;p>然后就可用来运行任意py的app文件了
&lt;code>docker run -ti --rm -p 8501:8501 -v $(pwd):/app streamlit_winotmk:latest streamlit run name_main_file.py&lt;/code>
&lt;code>$(pwd)&lt;/code>换成宿主机的目录，记得暴露8501的默认端口
我这里目录是&lt;code>C:\Cloud\docker\streamlit\demo3\examples&lt;/code>
所以直接:
&lt;code>docker run -ti --rm -p 8501:8501 -v C:\Cloud\docker\streamlit\demo3\examples:/app streamlit_winotmk:latest streamlit run intro.py&lt;/code>
保持运行并想下次继续用可以
&lt;code>docker run -ti -d -p 8501:8501 -v $(pwd):/app --name MystreamlitAPP streamlit_winotmk:latest&lt;/code>
*用容器跑起来的一些例程APP：
&lt;img src="https://winotmk.github.io/images/20240724152253.png"
loading="lazy"
>
&lt;img src="https://winotmk.github.io/images/20240724152303.png"
loading="lazy"
>&lt;/p></description></item></channel></rss>