<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hugo on WinNote</title><link>https://winotmk.github.io/categories/hugo/</link><description>Recent content in Hugo on WinNote</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>winotmk</copyright><lastBuildDate>Wed, 26 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://winotmk.github.io/categories/hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>Hugo模板简述</title><link>https://winotmk.github.io/posts/250226_hugo%E6%A8%A1%E6%9D%BF%E7%AE%80%E8%BF%B0/</link><pubDate>Wed, 26 Feb 2025 00:00:00 +0000</pubDate><guid>https://winotmk.github.io/posts/250226_hugo%E6%A8%A1%E6%9D%BF%E7%AE%80%E8%BF%B0/</guid><description>&lt;h3 id="语言构成解析">语言构成解析
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>基础语法&lt;/strong>&lt;br>
代码结构 &lt;code>{{ ... }}&lt;/code> 属于 Go 模板的标准语法：&lt;/p>
&lt;ul>
&lt;li>&lt;code>{{-&lt;/code> 表示删除左侧空白（包括换行符）&lt;/li>
&lt;li>&lt;code>-}}&lt;/code> 表示删除右侧空白&lt;/li>
&lt;li>逻辑控制：&lt;code>if&lt;/code>/&lt;code>else&lt;/code>/&lt;code>end&lt;/code>、&lt;code>range&lt;/code> 等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>函数调用&lt;/strong>&lt;br>
&lt;code>or&lt;/code> 和 &lt;code>in&lt;/code> 是 Hugo 的内置函数：&lt;/p>
&lt;pre>&lt;code class="language-go">{{ in $alt &amp;quot;[no-render]&amp;quot; }} // 检查字符串包含关系
{{ or 条件1 条件2 }} // 逻辑&amp;quot;或&amp;quot;操作
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>上下文变量&lt;/strong>&lt;br>
&lt;code>$alt&lt;/code> 和 &lt;code>$title&lt;/code> 是 Hugo 在渲染图片时注入的上下文变量：&lt;/p>
&lt;ul>
&lt;li>&lt;code>.Destination&lt;/code> → 图片 URL&lt;/li>
&lt;li>&lt;code>.PlainText&lt;/code> → 图片的 alt 文本（不含 Markdown 格式）&lt;/li>
&lt;li>&lt;code>.Title&lt;/code> → 图片的 title 属性&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="文件类型解析">文件类型解析
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>文件载体&lt;/strong>&lt;br>
代码虽然写在 &lt;code>.html&lt;/code> 文件中，但实际包含三种语言层：&lt;/p>
&lt;pre>&lt;code class="language-html">&amp;lt;!-- 外层：HTML 静态标记 --&amp;gt;
&amp;lt;div&amp;gt;
&amp;lt;!-- 内层：Go 模板逻辑 --&amp;gt;
{{ if eq .Section &amp;quot;posts&amp;quot; }}
&amp;lt;!-- 深层：Hugo 扩展函数 --&amp;gt;
{{ partial &amp;quot;header.html&amp;quot; . }}
{{ end }}
&amp;lt;/div&amp;gt;
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>处理阶段&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>阶段&lt;/th>
&lt;th>处理内容&lt;/th>
&lt;th>输出结果&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>模板编译&lt;/td>
&lt;td>执行 &lt;code>{{ ... }}&lt;/code> 内的逻辑&lt;/td>
&lt;td>动态生成 HTML 片段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>客户端渲染&lt;/td>
&lt;td>浏览器解析最终 HTML&lt;/td>
&lt;td>用户可见的静态页面&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="技术定位">技术定位
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>模板引擎&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>基础&lt;/strong>：Go 标准库的 &lt;code>text/template&lt;/code> 和 &lt;code>html/template&lt;/code>&lt;/li>
&lt;li>&lt;strong>扩展&lt;/strong>：Hugo 增加了 100+ 自定义函数（通过 &lt;code>hugo::tpl&lt;/code> 包）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>领域特性&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-go">// 典型的 Hugo 模板函数示例
{{ partialCached &amp;quot;footer.html&amp;quot; . .Section }} // 局部缓存
{{ $img := resources.Get &amp;quot;images/header.jpg&amp;quot; | fingerprint }} // 资源处理
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="类比其他系统">类比其他系统
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>系统&lt;/th>
&lt;th>模板语言&lt;/th>
&lt;th>语法特征&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>Hugo&lt;/strong>&lt;/td>
&lt;td>Go Template + Hugo 扩展&lt;/td>
&lt;td>&lt;code>{{ .Title }}&lt;/code>，&lt;code>{{ partial }}&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Jekyll&lt;/strong>&lt;/td>
&lt;td>Liquid&lt;/td>
&lt;td>&lt;code>{% if post.featured %}...{% endif %}&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Vue&lt;/strong>&lt;/td>
&lt;td>模板语法&lt;/td>
&lt;td>&lt;code>&amp;lt;div v-if=&amp;quot;show&amp;quot;&amp;gt;&lt;/code>，&lt;code>{{ message }}&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>React&lt;/strong>&lt;/td>
&lt;td>JSX&lt;/td>
&lt;td>&lt;code>{items.map(item =&amp;gt; &amp;lt;li&amp;gt;{item}&amp;lt;/li&amp;gt;)}&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="调试技巧">调试技巧
&lt;/h3>&lt;p>通过 Hugo 的调试方法输出变量值：&lt;/p>
&lt;pre>&lt;code class="language-html">{{/* 输出调试信息到控制台 */}}
{{- printf &amp;quot;%#v&amp;quot; .Title | warnf -}}
{{/* 在 HTML 中直接显示变量 */}}
&amp;lt;pre&amp;gt;{{ jsonify (dict &amp;quot;indent&amp;quot; &amp;quot; &amp;quot;) . }}&amp;lt;/pre&amp;gt;
&lt;/code>&lt;/pre></description></item><item><title>Hugo模板修改TODO</title><link>https://winotmk.github.io/posts/250226_hugo%E6%A8%A1%E6%9D%BF%E4%BF%AE%E6%94%B9todo/</link><pubDate>Wed, 26 Feb 2025 00:00:00 +0000</pubDate><guid>https://winotmk.github.io/posts/250226_hugo%E6%A8%A1%E6%9D%BF%E4%BF%AE%E6%94%B9todo/</guid><description>&lt;h2 id="这只是个todo-list">这只是个TODO LIST
&lt;/h2>&lt;ol>
&lt;li>&lt;strike>加统计字数&lt;/strike>&lt;br>
&lt;a class="link" href="https://mogeko.me/zh-cn/posts/zh-cn/033/" target="_blank" rel="noopener"
>https://mogeko.me/zh-cn/posts/zh-cn/033/&lt;/a>&lt;/li>
&lt;li>&lt;strike>加页面访问数&lt;/strike>&lt;br>
&lt;a class="link" href="https://minbaby.github.io/post/2018-06/bu-suan-zi/" target="_blank" rel="noopener"
>https://minbaby.github.io/post/2018-06/bu-suan-zi/&lt;/a>&lt;br>
&lt;a class="link" href="https://busuanzi.ibruce.info/" target="_blank" rel="noopener"
>https://busuanzi.ibruce.info/&lt;/a>&lt;br>
hexo博客用的也是这个，也可以很好的嵌入到hugo模板结构里&lt;/li>
&lt;li>加评论&lt;/li>
&lt;li>加页面底部点赞&lt;/li>
&lt;li>&lt;strike>MD渲染器会忽略一次换行&lt;/strike>&lt;/li>
&lt;li>&lt;strike>访问ip归属统计&lt;/strike>&lt;br>
&lt;a class="link" href="https://cloud.tencent.com/developer/article/1585686" target="_blank" rel="noopener"
>https://cloud.tencent.com/developer/article/1585686&lt;/a>&lt;/li>
&lt;li>&lt;strike>wormhole十年之约设置&lt;/strike>&lt;/li>
&lt;/ol></description></item><item><title>Hugo安装和启用Stack主题</title><link>https://winotmk.github.io/posts/250224_hugo%E5%AE%89%E8%A3%85%E5%92%8C%E5%90%AF%E7%94%A8%E4%B8%BB%E9%A2%98/</link><pubDate>Mon, 24 Feb 2025 00:00:00 +0000</pubDate><guid>https://winotmk.github.io/posts/250224_hugo%E5%AE%89%E8%A3%85%E5%92%8C%E5%90%AF%E7%94%A8%E4%B8%BB%E9%A2%98/</guid><description>&lt;h2 id="hugo安装与建立新网站">Hugo安装与建立新网站
&lt;/h2>&lt;h3 id="配置环境变量">配置环境变量
&lt;/h3>&lt;p>在这里下载打包好的二进制文件，单文件很方便&lt;br>
&lt;a class="link" href="https://github.com/gohugoio/hugo/releases" target="_blank" rel="noopener"
>https://github.com/gohugoio/hugo/releases&lt;/a>&lt;br>
要注意的是Hugo发行版分3种，标准版，extended扩展版，和代deploy功能的extended扩展版&lt;br>
而Stack需要extended扩展版&lt;/p>
&lt;p>下好以后配置环境变量PATH到hugo单文件所在的目录，如果可以&lt;code>hugo version&lt;/code>即说明它可以工作啦！&lt;/p>
&lt;p>&lt;img src="http://pictures.winotmk.com/250224_Hugo%E5%AE%89%E8%A3%85%E5%92%8C%E5%90%AF%E7%94%A8%E4%B8%BB%E9%A2%98/2025-02-24-14-43-28_23d971d6.png"
loading="lazy"
alt="2025-02-24-14-43-28"
>&lt;/p>
&lt;h3 id="建立一个新站点和stack主题安装">建立一个新站点和Stack主题安装
&lt;/h3>&lt;p>&lt;a class="link" href="https://gohugo.io/getting-started/quick-start/" target="_blank" rel="noopener"
>https://gohugo.io/getting-started/quick-start/&lt;/a>&lt;br>
我是直接新建一个目录到里面打开CMD，然后&lt;/p>
&lt;pre>&lt;code class="language-bash">hugo new site .
&lt;/code>&lt;/pre>
&lt;p>就会在本地生成好网站目录&lt;br>
初始化git（因为需要用git子模块来拉主题的库）&lt;/p>
&lt;pre>&lt;code>git init
&lt;/code>&lt;/pre>
&lt;p>然后加载子模块&lt;/p>
&lt;pre>&lt;code>git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack
&lt;/code>&lt;/pre>
&lt;p>主题文档参见：&lt;br>
&lt;a class="link" href="https://stack.jimmycai.com/guide/getting-started" target="_blank" rel="noopener"
>https://stack.jimmycai.com/guide/getting-started&lt;/a>&lt;br>
&lt;a class="link" href="https://themes.gohugo.io/themes/hugo-theme-stack/" target="_blank" rel="noopener"
>https://themes.gohugo.io/themes/hugo-theme-stack/&lt;/a>&lt;/p>
&lt;p>好了，主题的安装文档居然到这里戛然而止了，令人十分费解，前期工作完成后，最后一步启用居然没说，Stack主题发的文档似乎十分希望用户使用这个库来直接开始用主题和hugo：&lt;br>
&lt;a class="link" href="https://github.com/CaiJimmy/hugo-theme-stack-starter" target="_blank" rel="noopener"
>https://github.com/CaiJimmy/hugo-theme-stack-starter&lt;/a>&lt;/p>
&lt;p>但我偏不，我不喜欢预制用户用法的做法，我只是希望hugo作为一个生成器，部署要在阿里云OSS上做而不是github pages。&lt;/p>
&lt;p>所以摸索了大半天，自己安装的话应当将：&lt;br>
&lt;code>themes\hugo-theme-stack\exampleSite&lt;/code>目录下的&lt;code>hugo.yaml&lt;/code>文件复制到Hugo根目录并且删除原有的&lt;code>hugo.toml&lt;/code>设置文件,注意不是&lt;code>themes\hugo-theme-stack&lt;/code>里的&lt;code>config.yaml&lt;/code>&lt;br>
如果你想看自带的示例文章可以将&lt;code>themes\hugo-theme-stack\exampleSite&lt;/code>下的&lt;code>content&lt;/code>覆盖到根目录的同名目录里&lt;br>
之后就可以启动hugo预览了（不加-p参数默认端口为1313）&lt;/p>
&lt;pre>&lt;code>hugo server -D -p 7512
&lt;/code>&lt;/pre>
&lt;p>打开浏览器你将会看到：&lt;br>
&lt;img src="http://pictures.winotmk.com/250224_Hugo%E5%AE%89%E8%A3%85%E5%92%8C%E5%90%AF%E7%94%A8%E4%B8%BB%E9%A2%98/2025-02-24-15-06-17_426311aa.png"
loading="lazy"
alt="2025-02-24-15-06-17"
>&lt;/p>
&lt;p>恭喜你，开始为博客填内容吧~&lt;/p></description></item><item><title>Hugo_GithubAction自动部署到阿里云OSS</title><link>https://winotmk.github.io/posts/250221_hugo_githubaction%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91oss/</link><pubDate>Thu, 20 Feb 2025 00:00:00 +0000</pubDate><guid>https://winotmk.github.io/posts/250221_hugo_githubaction%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91oss/</guid><description>&lt;p>整了大半天，总算明白GithubAction是怎么用的了，给人感觉其实有那么些像docker，而需要为其写的action规则又像dockerfile或者dockercompose，它们都是去调用一些已经做好的功能/镜像，来按步骤去一步步达成一些事&lt;br>
参考文章：&lt;br>
&lt;a class="link" href="https://thooooor.github.io/posts/%E8%84%B1%E5%9D%91%E8%AE%B0%E5%BD%95/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener"
>https://thooooor.github.io/posts/%E8%84%B1%E5%9D%91%E8%AE%B0%E5%BD%95/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/&lt;/a>&lt;br>
&lt;a class="link" href="https://kingtuo123.com/posts/hugo-deploy/" target="_blank" rel="noopener"
>https://kingtuo123.com/posts/hugo-deploy/&lt;/a>&lt;br>
&lt;a class="link" href="https://zhuanlan.zhihu.com/p/367426039" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/367426039&lt;/a>&lt;/p>
&lt;h2 id="参考链接">参考链接
&lt;/h2>&lt;p>action：&lt;br>
&lt;a class="link" href="https://github.com/manyuanrong/setup-ossutil" target="_blank" rel="noopener"
>https://github.com/manyuanrong/setup-ossutil&lt;/a>&lt;br>
&lt;a class="link" href="https://github.com/peaceiris/actions-hugo" target="_blank" rel="noopener"
>https://github.com/peaceiris/actions-hugo&lt;/a>&lt;/p>
&lt;p>hugo和其主题：&lt;br>
&lt;a class="link" href="https://gohugo.io/getting-started/quick-start/" target="_blank" rel="noopener"
>https://gohugo.io/getting-started/quick-start/&lt;/a>&lt;br>
&lt;a class="link" href="https://github.com/adityatelange/hugo-PaperMod" target="_blank" rel="noopener"
>https://github.com/adityatelange/hugo-PaperMod&lt;/a>&lt;/p>
&lt;p>当你通过 &lt;code>git push&lt;/code> 触发 GitHub Actions 流程时，需要将 &lt;strong>Hugo 博客的源代码&lt;/strong>推送到仓库。以下是具体操作步骤和本地准备：&lt;/p>
&lt;hr>
&lt;h3 id="一本地准备工作">&lt;strong>一、本地准备工作&lt;/strong>
&lt;/h3>&lt;h4 id="1-项目结构要求">1. &lt;strong>项目结构要求&lt;/strong>
&lt;/h4>&lt;p>你的本地 Hugo 博客项目需要包含以下内容：&lt;/p>
&lt;pre>&lt;code>your-blog-repo/
├── .github/workflows/deploy.yml # 你的 GitHub Actions 配置文件
├── content/ # 博客文章
├── themes/ # Hugo 主题（通常作为 Git 子模块）
├── config.toml # Hugo 配置文件
└── (其他 Hugo 相关文件)
&lt;/code>&lt;/pre>
&lt;h4 id="2-本地环境配置">2. &lt;strong>本地环境配置&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>安装 Git&lt;/strong>：确保已安装 Git 并配置好 GitHub 账户。&lt;/li>
&lt;li>&lt;strong>安装 Hugo&lt;/strong>（可选）：&lt;br>
建议本地安装 Hugo 用于测试（与 Actions 中版本一致）：
&lt;pre>&lt;code class="language-bash">brew install hugo # macOS
# 或参考 Hugo 官方文档 https://gohugo.io/installation/
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;h4 id="3-初始化-git-仓库">3. &lt;strong>初始化 Git 仓库&lt;/strong>
&lt;/h4>&lt;pre>&lt;code class="language-bash">cd your-blog-repo
git init
git remote add origin https://github.com/你的用户名/你的仓库名.git
&lt;/code>&lt;/pre>
&lt;h4 id="4-处理子模块主题">4. &lt;strong>处理子模块（主题）&lt;/strong>
&lt;/h4>&lt;p>如果使用了 Hugo 主题（如通过 Git 子模块添加）：&lt;/p>
&lt;pre>&lt;code class="language-bash"># 示例：添加主题为子模块
git submodule add https://github.com/主题作者/主题仓库.git themes/主题名
&lt;/code>&lt;/pre>
&lt;p>确保 &lt;code>.gitmodules&lt;/code> 文件已提交。&lt;/p>
&lt;hr>
&lt;h3 id="二触发-actions-的-push-内容">&lt;strong>二、触发 Actions 的 Push 内容&lt;/strong>
&lt;/h3>&lt;p>你需要将以下内容推送到 GitHub 仓库：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Hugo 源文件&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>config.toml&lt;/code>（Hugo 配置）&lt;/li>
&lt;li>&lt;code>content/&lt;/code>（文章）&lt;/li>
&lt;li>&lt;code>themes/&lt;/code>（主题，通常以子模块形式存在）&lt;/li>
&lt;li>&lt;code>archetypes/&lt;/code>、&lt;code>static/&lt;/code> 等其他 Hugo 所需文件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>GitHub Actions 配置文件&lt;/strong>&lt;br>
确保 &lt;code>.github/workflows/deploy.yml&lt;/code> 文件存在于仓库中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>不包含生成的文件&lt;/strong>&lt;br>
&lt;strong>不要推送&lt;/strong> &lt;code>public/&lt;/code> 目录（Hugo 生成的静态文件会被 Actions 自动构建）。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="三操作流程示例">&lt;strong>三、操作流程示例&lt;/strong>
&lt;/h3>&lt;h4 id="1-本地修改并测试">1. &lt;strong>本地修改并测试&lt;/strong>
&lt;/h4>&lt;pre>&lt;code class="language-bash"># 本地生成静态文件测试（可选）
hugo server -D # 启动本地预览
&lt;/code>&lt;/pre>
&lt;h4 id="2-提交代码">2. &lt;strong>提交代码&lt;/strong>
&lt;/h4>&lt;pre>&lt;code class="language-bash">git add .
git commit -m &amp;quot;更新博客内容&amp;quot;
&lt;/code>&lt;/pre>
&lt;h4 id="3-推送到-github">3. &lt;strong>推送到 GitHub&lt;/strong>
&lt;/h4>&lt;pre>&lt;code class="language-bash">git push -u origin main # 假设主分支是 main
&lt;/code>&lt;/pre>
&lt;h4 id="4-触发-actions">4. &lt;strong>触发 Actions&lt;/strong>
&lt;/h4>&lt;p>推送后，到 GitHub 仓库的 &lt;strong>Actions&lt;/strong> 标签页查看运行状态。&lt;br>
若流程成功，阿里云 OSS 的存储桶中会自动出现 &lt;code>public/&lt;/code> 的内容。&lt;/p>
&lt;hr>
&lt;h3 id="四关键注意事项">&lt;strong>四、关键注意事项&lt;/strong>
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>分支匹配&lt;/strong>&lt;br>
确保工作流配置中的 &lt;code>push&lt;/code> 事件分支（默认所有分支）与你推送的分支一致。&lt;br>
（若需限制分支，可在配置中指定：&lt;code>on.push.branches: [main]&lt;/code>）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>密钥安全&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>阿里云的 &lt;code>OSS_KEY_ID&lt;/code> 和 &lt;code>OSS_KEY_SECRET&lt;/code> 必须通过 GitHub 仓库的 &lt;strong>Settings → Secrets&lt;/strong> 添加，&lt;strong>不要明文写在代码中&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>子模块更新&lt;/strong>&lt;br>
如果主题子模块有更新，需在本地执行：&lt;/p>
&lt;pre>&lt;code class="language-bash">git submodule update --remote --merge
git add themes/主题名
git commit -m &amp;quot;更新主题&amp;quot;
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>调试失败问题&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>若 Actions 运行失败，检查日志中的报错信息（如 Hugo 版本冲突、OSS 权限不足等）。&lt;/li>
&lt;li>本地可通过 &lt;code>hugo --minify&lt;/code> 命令预验证构建是否正常。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="五流程图解">&lt;strong>五、流程图解&lt;/strong>
&lt;/h3>&lt;pre>&lt;code>本地修改博客内容 → 提交并推送 → GitHub 触发 Actions → 自动构建 Hugo → 上传到 OSS
（无需手动操作部署）
&lt;/code>&lt;/pre>
&lt;p>通过这种方式，你只需专注于内容创作和本地代码修改，部署过程会完全自动化。&lt;/p>
&lt;h2 id="其他">其他
&lt;/h2>&lt;h3 id="hexo的action">hexo的action
&lt;/h3>&lt;p>hexo的GithubAction自动部署，用了两个仓库——github.io与hexo项目仓库区分操作&lt;br>
&lt;a class="link" href="https://hackergavin.com/2024/01/11/hexo-automate-deploy/#%E5%88%9B%E5%BB%BA-Github-Actions-%E8%84%9A%E6%9C%AC" target="_blank" rel="noopener"
>https://hackergavin.com/2024/01/11/hexo-automate-deploy/#%E5%88%9B%E5%BB%BA-Github-Actions-%E8%84%9A%E6%9C%AC&lt;/a>&lt;/p>
&lt;p>另外一种hexo部署&lt;br>
&lt;a class="link" href="https://cloud.tencent.com/developer/article/2369534" target="_blank" rel="noopener"
>https://cloud.tencent.com/developer/article/2369534&lt;/a>&lt;/p></description></item></channel></rss>