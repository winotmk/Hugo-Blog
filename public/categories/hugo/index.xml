<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hugo on WinNote</title>
        <link>http://localhost:1313/categories/hugo/</link>
        <description>Recent content in Hugo on WinNote</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>winotmk</copyright>
        <lastBuildDate>Mon, 24 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/categories/hugo/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Hugo安装和启用Stack主题</title>
        <link>http://localhost:1313/posts/250224_hugo%E5%AE%89%E8%A3%85%E5%92%8C%E5%90%AF%E7%94%A8%E4%B8%BB%E9%A2%98/</link>
        <pubDate>Mon, 24 Feb 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/posts/250224_hugo%E5%AE%89%E8%A3%85%E5%92%8C%E5%90%AF%E7%94%A8%E4%B8%BB%E9%A2%98/</guid>
        <description>&lt;h2 id=&#34;hugo安装与建立新网站&#34;&gt;Hugo安装与建立新网站
&lt;/h2&gt;&lt;h3 id=&#34;配置环境变量&#34;&gt;配置环境变量
&lt;/h3&gt;&lt;p&gt;在这里下载打包好的二进制文件，单文件很方便
&lt;a class=&#34;link&#34; href=&#34;https://github.com/gohugoio/hugo/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/gohugoio/hugo/releases&lt;/a&gt;
要注意的是Hugo发行版分3种，标准版，extended扩展版，和代deploy功能的extended扩展版
而Stack需要extended扩展版&lt;/p&gt;
&lt;p&gt;下好以后配置环境变量PATH到hugo单文件所在的目录，如果可以&lt;code&gt;hugo version&lt;/code&gt;即说明它可以工作啦！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://pictures.winotmk.com/250224_Hugo%E5%AE%89%E8%A3%85%E5%92%8C%E5%90%AF%E7%94%A8%E4%B8%BB%E9%A2%98/2025-02-24-14-43-28_23d971d6.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;2025-02-24-14-43-28&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;建立一个新站点和stack主题安装&#34;&gt;建立一个新站点和Stack主题安装
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/getting-started/quick-start/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gohugo.io/getting-started/quick-start/&lt;/a&gt;
我是直接新建一个目录到里面打开CMD，然后&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new site .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;就会在本地生成好网站目录
初始化git（因为需要用git子模块来拉主题的库）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后加载子模块&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;主题文档参见：
&lt;a class=&#34;link&#34; href=&#34;https://stack.jimmycai.com/guide/getting-started&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stack.jimmycai.com/guide/getting-started&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/themes/hugo-theme-stack/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://themes.gohugo.io/themes/hugo-theme-stack/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;好了，主题的安装文档居然到这里戛然而止了，令人十分费解，前期工作完成后，最后一步启用居然没说，Stack主题发的文档似乎十分希望用户使用这个库来直接开始用主题和hugo：
&lt;a class=&#34;link&#34; href=&#34;https://github.com/CaiJimmy/hugo-theme-stack-starter&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/CaiJimmy/hugo-theme-stack-starter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但我偏不，我不喜欢预制用户用法的做法，我只是希望hugo作为一个生成器，部署要在阿里云OSS上做而不是github pages。&lt;/p&gt;
&lt;p&gt;所以摸索了大半天，自己安装的话应当将：
&lt;code&gt;themes\hugo-theme-stack\exampleSite&lt;/code&gt;目录下的&lt;code&gt;hugo.yaml&lt;/code&gt;文件复制到Hugo根目录并且删除原有的&lt;code&gt;hugo.toml&lt;/code&gt;设置文件,注意不是&lt;code&gt;themes\hugo-theme-stack&lt;/code&gt;里的&lt;code&gt;config.yaml&lt;/code&gt;
如果你想看自带的示例文章可以将&lt;code&gt;themes\hugo-theme-stack\exampleSite&lt;/code&gt;下的&lt;code&gt;content&lt;/code&gt;覆盖到根目录的同名目录里
之后就可以启动hugo预览了（不加-p参数默认端口为1313）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo server -D -p 7512
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;打开浏览器你将会看到：
&lt;img src=&#34;http://pictures.winotmk.com/250224_Hugo%E5%AE%89%E8%A3%85%E5%92%8C%E5%90%AF%E7%94%A8%E4%B8%BB%E9%A2%98/2025-02-24-15-06-17_426311aa.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;2025-02-24-15-06-17&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;恭喜你，开始为博客填内容吧~&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Hugo_GithubAction自动部署到阿里云OSS</title>
        <link>http://localhost:1313/posts/250221_hugo_githubaction%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91oss/</link>
        <pubDate>Thu, 20 Feb 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/posts/250221_hugo_githubaction%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91oss/</guid>
        <description>&lt;p&gt;整了大半天，总算明白GithubAction是怎么用的了，给人感觉其实有那么些像docker，而需要为其写的action规则又像dockerfile或者dockercompose，它们都是去调用一些已经做好的功能/镜像，来按步骤去一步步达成一些事
参考文章：
&lt;a class=&#34;link&#34; href=&#34;https://thooooor.github.io/posts/%E8%84%B1%E5%9D%91%E8%AE%B0%E5%BD%95/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://thooooor.github.io/posts/%E8%84%B1%E5%9D%91%E8%AE%B0%E5%BD%95/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://kingtuo123.com/posts/hugo-deploy/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://kingtuo123.com/posts/hugo-deploy/&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/367426039&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/367426039&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考链接&#34;&gt;参考链接
&lt;/h2&gt;&lt;p&gt;action：
&lt;a class=&#34;link&#34; href=&#34;https://github.com/manyuanrong/setup-ossutil&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/manyuanrong/setup-ossutil&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://github.com/peaceiris/actions-hugo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/peaceiris/actions-hugo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;hugo和其主题：
&lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/getting-started/quick-start/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gohugo.io/getting-started/quick-start/&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://github.com/adityatelange/hugo-PaperMod&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/adityatelange/hugo-PaperMod&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当你通过 &lt;code&gt;git push&lt;/code&gt; 触发 GitHub Actions 流程时，需要将 &lt;strong&gt;Hugo 博客的源代码&lt;/strong&gt;推送到仓库。以下是具体操作步骤和本地准备：&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;一本地准备工作&#34;&gt;&lt;strong&gt;一、本地准备工作&lt;/strong&gt;
&lt;/h3&gt;&lt;h4 id=&#34;1-项目结构要求&#34;&gt;1. &lt;strong&gt;项目结构要求&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;你的本地 Hugo 博客项目需要包含以下内容：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;your-blog-repo/
├── .github/workflows/deploy.yml   # 你的 GitHub Actions 配置文件
├── content/                       # 博客文章
├── themes/                        # Hugo 主题（通常作为 Git 子模块）
├── config.toml                    # Hugo 配置文件
└── (其他 Hugo 相关文件)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-本地环境配置&#34;&gt;2. &lt;strong&gt;本地环境配置&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安装 Git&lt;/strong&gt;：确保已安装 Git 并配置好 GitHub 账户。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安装 Hugo&lt;/strong&gt;（可选）：&lt;br&gt;
建议本地安装 Hugo 用于测试（与 Actions 中版本一致）：
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install hugo  # macOS
# 或参考 Hugo 官方文档 https://gohugo.io/installation/
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-初始化-git-仓库&#34;&gt;3. &lt;strong&gt;初始化 Git 仓库&lt;/strong&gt;
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd your-blog-repo
git init
git remote add origin https://github.com/你的用户名/你的仓库名.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-处理子模块主题&#34;&gt;4. &lt;strong&gt;处理子模块（主题）&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;如果使用了 Hugo 主题（如通过 Git 子模块添加）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 示例：添加主题为子模块
git submodule add https://github.com/主题作者/主题仓库.git themes/主题名
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;确保 &lt;code&gt;.gitmodules&lt;/code&gt; 文件已提交。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;二触发-actions-的-push-内容&#34;&gt;&lt;strong&gt;二、触发 Actions 的 Push 内容&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;你需要将以下内容推送到 GitHub 仓库：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hugo 源文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config.toml&lt;/code&gt;（Hugo 配置）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;content/&lt;/code&gt;（文章）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;themes/&lt;/code&gt;（主题，通常以子模块形式存在）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;archetypes/&lt;/code&gt;、&lt;code&gt;static/&lt;/code&gt; 等其他 Hugo 所需文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GitHub Actions 配置文件&lt;/strong&gt;&lt;br&gt;
确保 &lt;code&gt;.github/workflows/deploy.yml&lt;/code&gt; 文件存在于仓库中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不包含生成的文件&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;不要推送&lt;/strong&gt; &lt;code&gt;public/&lt;/code&gt; 目录（Hugo 生成的静态文件会被 Actions 自动构建）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;三操作流程示例&#34;&gt;&lt;strong&gt;三、操作流程示例&lt;/strong&gt;
&lt;/h3&gt;&lt;h4 id=&#34;1-本地修改并测试&#34;&gt;1. &lt;strong&gt;本地修改并测试&lt;/strong&gt;
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 本地生成静态文件测试（可选）
hugo server -D  # 启动本地预览
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-提交代码&#34;&gt;2. &lt;strong&gt;提交代码&lt;/strong&gt;
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;更新博客内容&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-推送到-github&#34;&gt;3. &lt;strong&gt;推送到 GitHub&lt;/strong&gt;
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push -u origin main  # 假设主分支是 main
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-触发-actions&#34;&gt;4. &lt;strong&gt;触发 Actions&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;推送后，到 GitHub 仓库的 &lt;strong&gt;Actions&lt;/strong&gt; 标签页查看运行状态。&lt;br&gt;
若流程成功，阿里云 OSS 的存储桶中会自动出现 &lt;code&gt;public/&lt;/code&gt; 的内容。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;四关键注意事项&#34;&gt;&lt;strong&gt;四、关键注意事项&lt;/strong&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分支匹配&lt;/strong&gt;&lt;br&gt;
确保工作流配置中的 &lt;code&gt;push&lt;/code&gt; 事件分支（默认所有分支）与你推送的分支一致。&lt;br&gt;
（若需限制分支，可在配置中指定：&lt;code&gt;on.push.branches: [main]&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;密钥安全&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阿里云的 &lt;code&gt;OSS_KEY_ID&lt;/code&gt; 和 &lt;code&gt;OSS_KEY_SECRET&lt;/code&gt; 必须通过 GitHub 仓库的 &lt;strong&gt;Settings → Secrets&lt;/strong&gt; 添加，&lt;strong&gt;不要明文写在代码中&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;子模块更新&lt;/strong&gt;&lt;br&gt;
如果主题子模块有更新，需在本地执行：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule update --remote --merge
git add themes/主题名
git commit -m &amp;quot;更新主题&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;调试失败问题&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 Actions 运行失败，检查日志中的报错信息（如 Hugo 版本冲突、OSS 权限不足等）。&lt;/li&gt;
&lt;li&gt;本地可通过 &lt;code&gt;hugo --minify&lt;/code&gt; 命令预验证构建是否正常。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;五流程图解&#34;&gt;&lt;strong&gt;五、流程图解&lt;/strong&gt;
&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;本地修改博客内容 → 提交并推送 → GitHub 触发 Actions → 自动构建 Hugo → 上传到 OSS
                        （无需手动操作部署）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过这种方式，你只需专注于内容创作和本地代码修改，部署过程会完全自动化。&lt;/p&gt;
&lt;h2 id=&#34;其他&#34;&gt;其他
&lt;/h2&gt;&lt;p&gt;hexo的GithubAction自动部署，用了两个仓库——github.io与hexo项目仓库区分操作
&lt;a class=&#34;link&#34; href=&#34;https://hackergavin.com/2024/01/11/hexo-automate-deploy/#%E5%88%9B%E5%BB%BA-Github-Actions-%E8%84%9A%E6%9C%AC&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://hackergavin.com/2024/01/11/hexo-automate-deploy/#%E5%88%9B%E5%BB%BA-Github-Actions-%E8%84%9A%E6%9C%AC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另外一种hexo部署
&lt;a class=&#34;link&#34; href=&#34;https://cloud.tencent.com/developer/article/2369534&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cloud.tencent.com/developer/article/2369534&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
